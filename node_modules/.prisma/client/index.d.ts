
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model questions
 * 
 */
export type questions = $Result.DefaultSelection<Prisma.$questionsPayload>
/**
 * Model quizzes
 * 
 */
export type quizzes = $Result.DefaultSelection<Prisma.$quizzesPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model user_responses
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type user_responses = $Result.DefaultSelection<Prisma.$user_responsesPayload>
/**
 * Model user_usage_data
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type user_usage_data = $Result.DefaultSelection<Prisma.$user_usage_dataPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Questions
 * const questions = await prisma.questions.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Questions
   * const questions = await prisma.questions.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.questions`: Exposes CRUD operations for the **questions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.questions.findMany()
    * ```
    */
  get questions(): Prisma.questionsDelegate<ExtArgs>;

  /**
   * `prisma.quizzes`: Exposes CRUD operations for the **quizzes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quizzes
    * const quizzes = await prisma.quizzes.findMany()
    * ```
    */
  get quizzes(): Prisma.quizzesDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.user_responses`: Exposes CRUD operations for the **user_responses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_responses
    * const user_responses = await prisma.user_responses.findMany()
    * ```
    */
  get user_responses(): Prisma.user_responsesDelegate<ExtArgs>;

  /**
   * `prisma.user_usage_data`: Exposes CRUD operations for the **user_usage_data** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_usage_data
    * const user_usage_data = await prisma.user_usage_data.findMany()
    * ```
    */
  get user_usage_data(): Prisma.user_usage_dataDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    questions: 'questions',
    quizzes: 'quizzes',
    users: 'users',
    user_responses: 'user_responses',
    user_usage_data: 'user_usage_data'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'questions' | 'quizzes' | 'users' | 'user_responses' | 'user_usage_data'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      questions: {
        payload: Prisma.$questionsPayload<ExtArgs>
        fields: Prisma.questionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.questionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.questionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          findFirst: {
            args: Prisma.questionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.questionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          findMany: {
            args: Prisma.questionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>[]
          }
          create: {
            args: Prisma.questionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          createMany: {
            args: Prisma.questionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.questionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          update: {
            args: Prisma.questionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          deleteMany: {
            args: Prisma.questionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.questionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.questionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          aggregate: {
            args: Prisma.QuestionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuestions>
          }
          groupBy: {
            args: Prisma.questionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuestionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.questionsCountArgs<ExtArgs>,
            result: $Utils.Optional<QuestionsCountAggregateOutputType> | number
          }
        }
      }
      quizzes: {
        payload: Prisma.$quizzesPayload<ExtArgs>
        fields: Prisma.quizzesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.quizzesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.quizzesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          findFirst: {
            args: Prisma.quizzesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.quizzesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          findMany: {
            args: Prisma.quizzesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>[]
          }
          create: {
            args: Prisma.quizzesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          createMany: {
            args: Prisma.quizzesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.quizzesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          update: {
            args: Prisma.quizzesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          deleteMany: {
            args: Prisma.quizzesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.quizzesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.quizzesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          aggregate: {
            args: Prisma.QuizzesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuizzes>
          }
          groupBy: {
            args: Prisma.quizzesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuizzesGroupByOutputType>[]
          }
          count: {
            args: Prisma.quizzesCountArgs<ExtArgs>,
            result: $Utils.Optional<QuizzesCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      user_responses: {
        payload: Prisma.$user_responsesPayload<ExtArgs>
        fields: Prisma.user_responsesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_responsesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_responsesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>
          }
          findFirst: {
            args: Prisma.user_responsesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_responsesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>
          }
          findMany: {
            args: Prisma.user_responsesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>[]
          }
          create: {
            args: Prisma.user_responsesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>
          }
          createMany: {
            args: Prisma.user_responsesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.user_responsesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>
          }
          update: {
            args: Prisma.user_responsesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>
          }
          deleteMany: {
            args: Prisma.user_responsesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.user_responsesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.user_responsesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>
          }
          aggregate: {
            args: Prisma.User_responsesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser_responses>
          }
          groupBy: {
            args: Prisma.user_responsesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<User_responsesGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_responsesCountArgs<ExtArgs>,
            result: $Utils.Optional<User_responsesCountAggregateOutputType> | number
          }
        }
      }
      user_usage_data: {
        payload: Prisma.$user_usage_dataPayload<ExtArgs>
        fields: Prisma.user_usage_dataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_usage_dataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_usage_dataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_usage_dataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_usage_dataPayload>
          }
          findFirst: {
            args: Prisma.user_usage_dataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_usage_dataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_usage_dataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_usage_dataPayload>
          }
          findMany: {
            args: Prisma.user_usage_dataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_usage_dataPayload>[]
          }
          create: {
            args: Prisma.user_usage_dataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_usage_dataPayload>
          }
          createMany: {
            args: Prisma.user_usage_dataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.user_usage_dataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_usage_dataPayload>
          }
          update: {
            args: Prisma.user_usage_dataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_usage_dataPayload>
          }
          deleteMany: {
            args: Prisma.user_usage_dataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.user_usage_dataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.user_usage_dataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_usage_dataPayload>
          }
          aggregate: {
            args: Prisma.User_usage_dataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser_usage_data>
          }
          groupBy: {
            args: Prisma.user_usage_dataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<User_usage_dataGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_usage_dataCountArgs<ExtArgs>,
            result: $Utils.Optional<User_usage_dataCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type QuestionsCountOutputType
   */

  export type QuestionsCountOutputType = {
    user_responses: number
  }

  export type QuestionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_responses?: boolean | QuestionsCountOutputTypeCountUser_responsesArgs
  }

  // Custom InputTypes

  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionsCountOutputType
     */
    select?: QuestionsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeCountUser_responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_responsesWhereInput
  }



  /**
   * Count Type QuizzesCountOutputType
   */

  export type QuizzesCountOutputType = {
    questions: number
    user_responses: number
  }

  export type QuizzesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | QuizzesCountOutputTypeCountQuestionsArgs
    user_responses?: boolean | QuizzesCountOutputTypeCountUser_responsesArgs
  }

  // Custom InputTypes

  /**
   * QuizzesCountOutputType without action
   */
  export type QuizzesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesCountOutputType
     */
    select?: QuizzesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * QuizzesCountOutputType without action
   */
  export type QuizzesCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionsWhereInput
  }


  /**
   * QuizzesCountOutputType without action
   */
  export type QuizzesCountOutputTypeCountUser_responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_responsesWhereInput
  }



  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    quizzes: number
    user_usage_data: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizzes?: boolean | UsersCountOutputTypeCountQuizzesArgs
    user_usage_data?: boolean | UsersCountOutputTypeCountUser_usage_dataArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quizzesWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUser_usage_dataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_usage_dataWhereInput
  }



  /**
   * Models
   */

  /**
   * Model questions
   */

  export type AggregateQuestions = {
    _count: QuestionsCountAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  export type QuestionsMinAggregateOutputType = {
    id: string | null
    quiz_id: string | null
    text: string | null
    correct_answer: string | null
    created_at: Date | null
  }

  export type QuestionsMaxAggregateOutputType = {
    id: string | null
    quiz_id: string | null
    text: string | null
    correct_answer: string | null
    created_at: Date | null
  }

  export type QuestionsCountAggregateOutputType = {
    id: number
    quiz_id: number
    text: number
    options: number
    correct_answer: number
    created_at: number
    _all: number
  }


  export type QuestionsMinAggregateInputType = {
    id?: true
    quiz_id?: true
    text?: true
    correct_answer?: true
    created_at?: true
  }

  export type QuestionsMaxAggregateInputType = {
    id?: true
    quiz_id?: true
    text?: true
    correct_answer?: true
    created_at?: true
  }

  export type QuestionsCountAggregateInputType = {
    id?: true
    quiz_id?: true
    text?: true
    options?: true
    correct_answer?: true
    created_at?: true
    _all?: true
  }

  export type QuestionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questions to aggregate.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned questions
    **/
    _count?: true | QuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionsMaxAggregateInputType
  }

  export type GetQuestionsAggregateType<T extends QuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestions[P]>
      : GetScalarType<T[P], AggregateQuestions[P]>
  }




  export type questionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionsWhereInput
    orderBy?: questionsOrderByWithAggregationInput | questionsOrderByWithAggregationInput[]
    by: QuestionsScalarFieldEnum[] | QuestionsScalarFieldEnum
    having?: questionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionsCountAggregateInputType | true
    _min?: QuestionsMinAggregateInputType
    _max?: QuestionsMaxAggregateInputType
  }

  export type QuestionsGroupByOutputType = {
    id: string
    quiz_id: string
    text: string
    options: string[]
    correct_answer: string
    created_at: Date
    _count: QuestionsCountAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  type GetQuestionsGroupByPayload<T extends questionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
        }
      >
    >


  export type questionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quiz_id?: boolean
    text?: boolean
    options?: boolean
    correct_answer?: boolean
    created_at?: boolean
    quizzes?: boolean | quizzesDefaultArgs<ExtArgs>
    user_responses?: boolean | questions$user_responsesArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questions"]>

  export type questionsSelectScalar = {
    id?: boolean
    quiz_id?: boolean
    text?: boolean
    options?: boolean
    correct_answer?: boolean
    created_at?: boolean
  }

  export type questionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizzes?: boolean | quizzesDefaultArgs<ExtArgs>
    user_responses?: boolean | questions$user_responsesArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $questionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "questions"
    objects: {
      quizzes: Prisma.$quizzesPayload<ExtArgs>
      user_responses: Prisma.$user_responsesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      quiz_id: string
      text: string
      options: string[]
      correct_answer: string
      created_at: Date
    }, ExtArgs["result"]["questions"]>
    composites: {}
  }


  type questionsGetPayload<S extends boolean | null | undefined | questionsDefaultArgs> = $Result.GetResult<Prisma.$questionsPayload, S>

  type questionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<questionsFindManyArgs, 'select' | 'include'> & {
      select?: QuestionsCountAggregateInputType | true
    }

  export interface questionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['questions'], meta: { name: 'questions' } }
    /**
     * Find zero or one Questions that matches the filter.
     * @param {questionsFindUniqueArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends questionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, questionsFindUniqueArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Questions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {questionsFindUniqueOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends questionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, questionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindFirstArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends questionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, questionsFindFirstArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Questions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindFirstOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends questionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, questionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.questions.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.questions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionsWithIdOnly = await prisma.questions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends questionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Questions.
     * @param {questionsCreateArgs} args - Arguments to create a Questions.
     * @example
     * // Create one Questions
     * const Questions = await prisma.questions.create({
     *   data: {
     *     // ... data to create a Questions
     *   }
     * })
     * 
    **/
    create<T extends questionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, questionsCreateArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Questions.
     *     @param {questionsCreateManyArgs} args - Arguments to create many Questions.
     *     @example
     *     // Create many Questions
     *     const questions = await prisma.questions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends questionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Questions.
     * @param {questionsDeleteArgs} args - Arguments to delete one Questions.
     * @example
     * // Delete one Questions
     * const Questions = await prisma.questions.delete({
     *   where: {
     *     // ... filter to delete one Questions
     *   }
     * })
     * 
    **/
    delete<T extends questionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, questionsDeleteArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Questions.
     * @param {questionsUpdateArgs} args - Arguments to update one Questions.
     * @example
     * // Update one Questions
     * const questions = await prisma.questions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends questionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, questionsUpdateArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {questionsDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.questions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends questionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const questions = await prisma.questions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends questionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, questionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Questions.
     * @param {questionsUpsertArgs} args - Arguments to update or create a Questions.
     * @example
     * // Update or create a Questions
     * const questions = await prisma.questions.upsert({
     *   create: {
     *     // ... data to create a Questions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questions we want to update
     *   }
     * })
    **/
    upsert<T extends questionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, questionsUpsertArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.questions.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends questionsCountArgs>(
      args?: Subset<T, questionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionsAggregateArgs>(args: Subset<T, QuestionsAggregateArgs>): Prisma.PrismaPromise<GetQuestionsAggregateType<T>>

    /**
     * Group by Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends questionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: questionsGroupByArgs['orderBy'] }
        : { orderBy?: questionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, questionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the questions model
   */
  readonly fields: questionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for questions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__questionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    quizzes<T extends quizzesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, quizzesDefaultArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user_responses<T extends questions$user_responsesArgs<ExtArgs> = {}>(args?: Subset<T, questions$user_responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the questions model
   */ 
  interface questionsFieldRefs {
    readonly id: FieldRef<"questions", 'String'>
    readonly quiz_id: FieldRef<"questions", 'String'>
    readonly text: FieldRef<"questions", 'String'>
    readonly options: FieldRef<"questions", 'String[]'>
    readonly correct_answer: FieldRef<"questions", 'String'>
    readonly created_at: FieldRef<"questions", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * questions findUnique
   */
  export type questionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where: questionsWhereUniqueInput
  }


  /**
   * questions findUniqueOrThrow
   */
  export type questionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where: questionsWhereUniqueInput
  }


  /**
   * questions findFirst
   */
  export type questionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }


  /**
   * questions findFirstOrThrow
   */
  export type questionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }


  /**
   * questions findMany
   */
  export type questionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }


  /**
   * questions create
   */
  export type questionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The data needed to create a questions.
     */
    data: XOR<questionsCreateInput, questionsUncheckedCreateInput>
  }


  /**
   * questions createMany
   */
  export type questionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many questions.
     */
    data: questionsCreateManyInput | questionsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * questions update
   */
  export type questionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The data needed to update a questions.
     */
    data: XOR<questionsUpdateInput, questionsUncheckedUpdateInput>
    /**
     * Choose, which questions to update.
     */
    where: questionsWhereUniqueInput
  }


  /**
   * questions updateMany
   */
  export type questionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update questions.
     */
    data: XOR<questionsUpdateManyMutationInput, questionsUncheckedUpdateManyInput>
    /**
     * Filter which questions to update
     */
    where?: questionsWhereInput
  }


  /**
   * questions upsert
   */
  export type questionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The filter to search for the questions to update in case it exists.
     */
    where: questionsWhereUniqueInput
    /**
     * In case the questions found by the `where` argument doesn't exist, create a new questions with this data.
     */
    create: XOR<questionsCreateInput, questionsUncheckedCreateInput>
    /**
     * In case the questions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<questionsUpdateInput, questionsUncheckedUpdateInput>
  }


  /**
   * questions delete
   */
  export type questionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter which questions to delete.
     */
    where: questionsWhereUniqueInput
  }


  /**
   * questions deleteMany
   */
  export type questionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questions to delete
     */
    where?: questionsWhereInput
  }


  /**
   * questions.user_responses
   */
  export type questions$user_responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_responsesInclude<ExtArgs> | null
    where?: user_responsesWhereInput
    orderBy?: user_responsesOrderByWithRelationInput | user_responsesOrderByWithRelationInput[]
    cursor?: user_responsesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_responsesScalarFieldEnum | User_responsesScalarFieldEnum[]
  }


  /**
   * questions without action
   */
  export type questionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
  }



  /**
   * Model quizzes
   */

  export type AggregateQuizzes = {
    _count: QuizzesCountAggregateOutputType | null
    _avg: QuizzesAvgAggregateOutputType | null
    _sum: QuizzesSumAggregateOutputType | null
    _min: QuizzesMinAggregateOutputType | null
    _max: QuizzesMaxAggregateOutputType | null
  }

  export type QuizzesAvgAggregateOutputType = {
    total_time_taken: number | null
    correct_answers_count: number | null
  }

  export type QuizzesSumAggregateOutputType = {
    total_time_taken: number | null
    correct_answers_count: number | null
  }

  export type QuizzesMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    quiz_title: string | null
    created_at: Date | null
    total_time_taken: number | null
    correct_answers_count: number | null
  }

  export type QuizzesMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    quiz_title: string | null
    created_at: Date | null
    total_time_taken: number | null
    correct_answers_count: number | null
  }

  export type QuizzesCountAggregateOutputType = {
    id: number
    user_id: number
    quiz_title: number
    created_at: number
    total_time_taken: number
    correct_answers_count: number
    _all: number
  }


  export type QuizzesAvgAggregateInputType = {
    total_time_taken?: true
    correct_answers_count?: true
  }

  export type QuizzesSumAggregateInputType = {
    total_time_taken?: true
    correct_answers_count?: true
  }

  export type QuizzesMinAggregateInputType = {
    id?: true
    user_id?: true
    quiz_title?: true
    created_at?: true
    total_time_taken?: true
    correct_answers_count?: true
  }

  export type QuizzesMaxAggregateInputType = {
    id?: true
    user_id?: true
    quiz_title?: true
    created_at?: true
    total_time_taken?: true
    correct_answers_count?: true
  }

  export type QuizzesCountAggregateInputType = {
    id?: true
    user_id?: true
    quiz_title?: true
    created_at?: true
    total_time_taken?: true
    correct_answers_count?: true
    _all?: true
  }

  export type QuizzesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which quizzes to aggregate.
     */
    where?: quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned quizzes
    **/
    _count?: true | QuizzesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuizzesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuizzesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizzesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizzesMaxAggregateInputType
  }

  export type GetQuizzesAggregateType<T extends QuizzesAggregateArgs> = {
        [P in keyof T & keyof AggregateQuizzes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuizzes[P]>
      : GetScalarType<T[P], AggregateQuizzes[P]>
  }




  export type quizzesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quizzesWhereInput
    orderBy?: quizzesOrderByWithAggregationInput | quizzesOrderByWithAggregationInput[]
    by: QuizzesScalarFieldEnum[] | QuizzesScalarFieldEnum
    having?: quizzesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizzesCountAggregateInputType | true
    _avg?: QuizzesAvgAggregateInputType
    _sum?: QuizzesSumAggregateInputType
    _min?: QuizzesMinAggregateInputType
    _max?: QuizzesMaxAggregateInputType
  }

  export type QuizzesGroupByOutputType = {
    id: string
    user_id: string
    quiz_title: string
    created_at: Date
    total_time_taken: number | null
    correct_answers_count: number
    _count: QuizzesCountAggregateOutputType | null
    _avg: QuizzesAvgAggregateOutputType | null
    _sum: QuizzesSumAggregateOutputType | null
    _min: QuizzesMinAggregateOutputType | null
    _max: QuizzesMaxAggregateOutputType | null
  }

  type GetQuizzesGroupByPayload<T extends quizzesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuizzesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizzesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizzesGroupByOutputType[P]>
            : GetScalarType<T[P], QuizzesGroupByOutputType[P]>
        }
      >
    >


  export type quizzesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    quiz_title?: boolean
    created_at?: boolean
    total_time_taken?: boolean
    correct_answers_count?: boolean
    questions?: boolean | quizzes$questionsArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
    user_responses?: boolean | quizzes$user_responsesArgs<ExtArgs>
    _count?: boolean | QuizzesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quizzes"]>

  export type quizzesSelectScalar = {
    id?: boolean
    user_id?: boolean
    quiz_title?: boolean
    created_at?: boolean
    total_time_taken?: boolean
    correct_answers_count?: boolean
  }

  export type quizzesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | quizzes$questionsArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
    user_responses?: boolean | quizzes$user_responsesArgs<ExtArgs>
    _count?: boolean | QuizzesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $quizzesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "quizzes"
    objects: {
      questions: Prisma.$questionsPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs>
      user_responses: Prisma.$user_responsesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      quiz_title: string
      created_at: Date
      total_time_taken: number | null
      correct_answers_count: number
    }, ExtArgs["result"]["quizzes"]>
    composites: {}
  }


  type quizzesGetPayload<S extends boolean | null | undefined | quizzesDefaultArgs> = $Result.GetResult<Prisma.$quizzesPayload, S>

  type quizzesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<quizzesFindManyArgs, 'select' | 'include'> & {
      select?: QuizzesCountAggregateInputType | true
    }

  export interface quizzesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['quizzes'], meta: { name: 'quizzes' } }
    /**
     * Find zero or one Quizzes that matches the filter.
     * @param {quizzesFindUniqueArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends quizzesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, quizzesFindUniqueArgs<ExtArgs>>
    ): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Quizzes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {quizzesFindUniqueOrThrowArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends quizzesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, quizzesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesFindFirstArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends quizzesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, quizzesFindFirstArgs<ExtArgs>>
    ): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Quizzes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesFindFirstOrThrowArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends quizzesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, quizzesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quizzes
     * const quizzes = await prisma.quizzes.findMany()
     * 
     * // Get first 10 Quizzes
     * const quizzes = await prisma.quizzes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quizzesWithIdOnly = await prisma.quizzes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends quizzesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quizzesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Quizzes.
     * @param {quizzesCreateArgs} args - Arguments to create a Quizzes.
     * @example
     * // Create one Quizzes
     * const Quizzes = await prisma.quizzes.create({
     *   data: {
     *     // ... data to create a Quizzes
     *   }
     * })
     * 
    **/
    create<T extends quizzesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, quizzesCreateArgs<ExtArgs>>
    ): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Quizzes.
     *     @param {quizzesCreateManyArgs} args - Arguments to create many Quizzes.
     *     @example
     *     // Create many Quizzes
     *     const quizzes = await prisma.quizzes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends quizzesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quizzesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Quizzes.
     * @param {quizzesDeleteArgs} args - Arguments to delete one Quizzes.
     * @example
     * // Delete one Quizzes
     * const Quizzes = await prisma.quizzes.delete({
     *   where: {
     *     // ... filter to delete one Quizzes
     *   }
     * })
     * 
    **/
    delete<T extends quizzesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, quizzesDeleteArgs<ExtArgs>>
    ): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Quizzes.
     * @param {quizzesUpdateArgs} args - Arguments to update one Quizzes.
     * @example
     * // Update one Quizzes
     * const quizzes = await prisma.quizzes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends quizzesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, quizzesUpdateArgs<ExtArgs>>
    ): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Quizzes.
     * @param {quizzesDeleteManyArgs} args - Arguments to filter Quizzes to delete.
     * @example
     * // Delete a few Quizzes
     * const { count } = await prisma.quizzes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends quizzesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quizzesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quizzes
     * const quizzes = await prisma.quizzes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends quizzesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, quizzesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Quizzes.
     * @param {quizzesUpsertArgs} args - Arguments to update or create a Quizzes.
     * @example
     * // Update or create a Quizzes
     * const quizzes = await prisma.quizzes.upsert({
     *   create: {
     *     // ... data to create a Quizzes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quizzes we want to update
     *   }
     * })
    **/
    upsert<T extends quizzesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, quizzesUpsertArgs<ExtArgs>>
    ): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesCountArgs} args - Arguments to filter Quizzes to count.
     * @example
     * // Count the number of Quizzes
     * const count = await prisma.quizzes.count({
     *   where: {
     *     // ... the filter for the Quizzes we want to count
     *   }
     * })
    **/
    count<T extends quizzesCountArgs>(
      args?: Subset<T, quizzesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizzesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizzesAggregateArgs>(args: Subset<T, QuizzesAggregateArgs>): Prisma.PrismaPromise<GetQuizzesAggregateType<T>>

    /**
     * Group by Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends quizzesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: quizzesGroupByArgs['orderBy'] }
        : { orderBy?: quizzesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, quizzesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizzesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the quizzes model
   */
  readonly fields: quizzesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for quizzes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__quizzesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    questions<T extends quizzes$questionsArgs<ExtArgs> = {}>(args?: Subset<T, quizzes$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user_responses<T extends quizzes$user_responsesArgs<ExtArgs> = {}>(args?: Subset<T, quizzes$user_responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the quizzes model
   */ 
  interface quizzesFieldRefs {
    readonly id: FieldRef<"quizzes", 'String'>
    readonly user_id: FieldRef<"quizzes", 'String'>
    readonly quiz_title: FieldRef<"quizzes", 'String'>
    readonly created_at: FieldRef<"quizzes", 'DateTime'>
    readonly total_time_taken: FieldRef<"quizzes", 'Int'>
    readonly correct_answers_count: FieldRef<"quizzes", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * quizzes findUnique
   */
  export type quizzesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where: quizzesWhereUniqueInput
  }


  /**
   * quizzes findUniqueOrThrow
   */
  export type quizzesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where: quizzesWhereUniqueInput
  }


  /**
   * quizzes findFirst
   */
  export type quizzesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where?: quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quizzes.
     */
    cursor?: quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quizzes.
     */
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }


  /**
   * quizzes findFirstOrThrow
   */
  export type quizzesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where?: quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quizzes.
     */
    cursor?: quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quizzes.
     */
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }


  /**
   * quizzes findMany
   */
  export type quizzesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where?: quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing quizzes.
     */
    cursor?: quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }


  /**
   * quizzes create
   */
  export type quizzesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * The data needed to create a quizzes.
     */
    data: XOR<quizzesCreateInput, quizzesUncheckedCreateInput>
  }


  /**
   * quizzes createMany
   */
  export type quizzesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many quizzes.
     */
    data: quizzesCreateManyInput | quizzesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * quizzes update
   */
  export type quizzesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * The data needed to update a quizzes.
     */
    data: XOR<quizzesUpdateInput, quizzesUncheckedUpdateInput>
    /**
     * Choose, which quizzes to update.
     */
    where: quizzesWhereUniqueInput
  }


  /**
   * quizzes updateMany
   */
  export type quizzesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update quizzes.
     */
    data: XOR<quizzesUpdateManyMutationInput, quizzesUncheckedUpdateManyInput>
    /**
     * Filter which quizzes to update
     */
    where?: quizzesWhereInput
  }


  /**
   * quizzes upsert
   */
  export type quizzesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * The filter to search for the quizzes to update in case it exists.
     */
    where: quizzesWhereUniqueInput
    /**
     * In case the quizzes found by the `where` argument doesn't exist, create a new quizzes with this data.
     */
    create: XOR<quizzesCreateInput, quizzesUncheckedCreateInput>
    /**
     * In case the quizzes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<quizzesUpdateInput, quizzesUncheckedUpdateInput>
  }


  /**
   * quizzes delete
   */
  export type quizzesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter which quizzes to delete.
     */
    where: quizzesWhereUniqueInput
  }


  /**
   * quizzes deleteMany
   */
  export type quizzesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which quizzes to delete
     */
    where?: quizzesWhereInput
  }


  /**
   * quizzes.questions
   */
  export type quizzes$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    where?: questionsWhereInput
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    cursor?: questionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }


  /**
   * quizzes.user_responses
   */
  export type quizzes$user_responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_responsesInclude<ExtArgs> | null
    where?: user_responsesWhereInput
    orderBy?: user_responsesOrderByWithRelationInput | user_responsesOrderByWithRelationInput[]
    cursor?: user_responsesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_responsesScalarFieldEnum | User_responsesScalarFieldEnum[]
  }


  /**
   * quizzes without action
   */
  export type quizzesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizzesInclude<ExtArgs> | null
  }



  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    email: string | null
    created_at: Date | null
    password: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    email: string | null
    created_at: Date | null
    password: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    created_at: number
    password: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    created_at?: true
    password?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    created_at?: true
    password?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    created_at?: true
    password?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    email: string
    created_at: Date
    password: string | null
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    created_at?: boolean
    password?: boolean
    quizzes?: boolean | users$quizzesArgs<ExtArgs>
    user_usage_data?: boolean | users$user_usage_dataArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    email?: boolean
    created_at?: boolean
    password?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizzes?: boolean | users$quizzesArgs<ExtArgs>
    user_usage_data?: boolean | users$user_usage_dataArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      quizzes: Prisma.$quizzesPayload<ExtArgs>[]
      user_usage_data: Prisma.$user_usage_dataPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      created_at: Date
      password: string | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    quizzes<T extends users$quizzesArgs<ExtArgs> = {}>(args?: Subset<T, users$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, 'findMany'> | Null>;

    user_usage_data<T extends users$user_usage_dataArgs<ExtArgs> = {}>(args?: Subset<T, users$user_usage_dataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_usage_dataPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly password: FieldRef<"users", 'String'>
  }
    

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.quizzes
   */
  export type users$quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizzesInclude<ExtArgs> | null
    where?: quizzesWhereInput
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    cursor?: quizzesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }


  /**
   * users.user_usage_data
   */
  export type users$user_usage_dataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_usage_data
     */
    select?: user_usage_dataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_usage_dataInclude<ExtArgs> | null
    where?: user_usage_dataWhereInput
    orderBy?: user_usage_dataOrderByWithRelationInput | user_usage_dataOrderByWithRelationInput[]
    cursor?: user_usage_dataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_usage_dataScalarFieldEnum | User_usage_dataScalarFieldEnum[]
  }


  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
  }



  /**
   * Model user_responses
   */

  export type AggregateUser_responses = {
    _count: User_responsesCountAggregateOutputType | null
    _min: User_responsesMinAggregateOutputType | null
    _max: User_responsesMaxAggregateOutputType | null
  }

  export type User_responsesMinAggregateOutputType = {
    id: string | null
    question_id: string | null
    quiz_id: string | null
    user_answer: string | null
    is_correct: boolean | null
    created_at: Date | null
  }

  export type User_responsesMaxAggregateOutputType = {
    id: string | null
    question_id: string | null
    quiz_id: string | null
    user_answer: string | null
    is_correct: boolean | null
    created_at: Date | null
  }

  export type User_responsesCountAggregateOutputType = {
    id: number
    question_id: number
    quiz_id: number
    user_answer: number
    is_correct: number
    created_at: number
    _all: number
  }


  export type User_responsesMinAggregateInputType = {
    id?: true
    question_id?: true
    quiz_id?: true
    user_answer?: true
    is_correct?: true
    created_at?: true
  }

  export type User_responsesMaxAggregateInputType = {
    id?: true
    question_id?: true
    quiz_id?: true
    user_answer?: true
    is_correct?: true
    created_at?: true
  }

  export type User_responsesCountAggregateInputType = {
    id?: true
    question_id?: true
    quiz_id?: true
    user_answer?: true
    is_correct?: true
    created_at?: true
    _all?: true
  }

  export type User_responsesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_responses to aggregate.
     */
    where?: user_responsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_responses to fetch.
     */
    orderBy?: user_responsesOrderByWithRelationInput | user_responsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_responsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_responses
    **/
    _count?: true | User_responsesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_responsesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_responsesMaxAggregateInputType
  }

  export type GetUser_responsesAggregateType<T extends User_responsesAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_responses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_responses[P]>
      : GetScalarType<T[P], AggregateUser_responses[P]>
  }




  export type user_responsesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_responsesWhereInput
    orderBy?: user_responsesOrderByWithAggregationInput | user_responsesOrderByWithAggregationInput[]
    by: User_responsesScalarFieldEnum[] | User_responsesScalarFieldEnum
    having?: user_responsesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_responsesCountAggregateInputType | true
    _min?: User_responsesMinAggregateInputType
    _max?: User_responsesMaxAggregateInputType
  }

  export type User_responsesGroupByOutputType = {
    id: string
    question_id: string
    quiz_id: string
    user_answer: string
    is_correct: boolean
    created_at: Date
    _count: User_responsesCountAggregateOutputType | null
    _min: User_responsesMinAggregateOutputType | null
    _max: User_responsesMaxAggregateOutputType | null
  }

  type GetUser_responsesGroupByPayload<T extends user_responsesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_responsesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_responsesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_responsesGroupByOutputType[P]>
            : GetScalarType<T[P], User_responsesGroupByOutputType[P]>
        }
      >
    >


  export type user_responsesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_id?: boolean
    quiz_id?: boolean
    user_answer?: boolean
    is_correct?: boolean
    created_at?: boolean
    questions?: boolean | questionsDefaultArgs<ExtArgs>
    quizzes?: boolean | quizzesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_responses"]>

  export type user_responsesSelectScalar = {
    id?: boolean
    question_id?: boolean
    quiz_id?: boolean
    user_answer?: boolean
    is_correct?: boolean
    created_at?: boolean
  }

  export type user_responsesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | questionsDefaultArgs<ExtArgs>
    quizzes?: boolean | quizzesDefaultArgs<ExtArgs>
  }


  export type $user_responsesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_responses"
    objects: {
      questions: Prisma.$questionsPayload<ExtArgs>
      quizzes: Prisma.$quizzesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      question_id: string
      quiz_id: string
      user_answer: string
      is_correct: boolean
      created_at: Date
    }, ExtArgs["result"]["user_responses"]>
    composites: {}
  }


  type user_responsesGetPayload<S extends boolean | null | undefined | user_responsesDefaultArgs> = $Result.GetResult<Prisma.$user_responsesPayload, S>

  type user_responsesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_responsesFindManyArgs, 'select' | 'include'> & {
      select?: User_responsesCountAggregateInputType | true
    }

  export interface user_responsesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_responses'], meta: { name: 'user_responses' } }
    /**
     * Find zero or one User_responses that matches the filter.
     * @param {user_responsesFindUniqueArgs} args - Arguments to find a User_responses
     * @example
     * // Get one User_responses
     * const user_responses = await prisma.user_responses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_responsesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, user_responsesFindUniqueArgs<ExtArgs>>
    ): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User_responses that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {user_responsesFindUniqueOrThrowArgs} args - Arguments to find a User_responses
     * @example
     * // Get one User_responses
     * const user_responses = await prisma.user_responses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_responsesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_responsesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User_responses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_responsesFindFirstArgs} args - Arguments to find a User_responses
     * @example
     * // Get one User_responses
     * const user_responses = await prisma.user_responses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_responsesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, user_responsesFindFirstArgs<ExtArgs>>
    ): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User_responses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_responsesFindFirstOrThrowArgs} args - Arguments to find a User_responses
     * @example
     * // Get one User_responses
     * const user_responses = await prisma.user_responses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_responsesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_responsesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more User_responses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_responsesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_responses
     * const user_responses = await prisma.user_responses.findMany()
     * 
     * // Get first 10 User_responses
     * const user_responses = await prisma.user_responses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_responsesWithIdOnly = await prisma.user_responses.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_responsesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_responsesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User_responses.
     * @param {user_responsesCreateArgs} args - Arguments to create a User_responses.
     * @example
     * // Create one User_responses
     * const User_responses = await prisma.user_responses.create({
     *   data: {
     *     // ... data to create a User_responses
     *   }
     * })
     * 
    **/
    create<T extends user_responsesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, user_responsesCreateArgs<ExtArgs>>
    ): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many User_responses.
     *     @param {user_responsesCreateManyArgs} args - Arguments to create many User_responses.
     *     @example
     *     // Create many User_responses
     *     const user_responses = await prisma.user_responses.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_responsesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_responsesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User_responses.
     * @param {user_responsesDeleteArgs} args - Arguments to delete one User_responses.
     * @example
     * // Delete one User_responses
     * const User_responses = await prisma.user_responses.delete({
     *   where: {
     *     // ... filter to delete one User_responses
     *   }
     * })
     * 
    **/
    delete<T extends user_responsesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, user_responsesDeleteArgs<ExtArgs>>
    ): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User_responses.
     * @param {user_responsesUpdateArgs} args - Arguments to update one User_responses.
     * @example
     * // Update one User_responses
     * const user_responses = await prisma.user_responses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_responsesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, user_responsesUpdateArgs<ExtArgs>>
    ): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more User_responses.
     * @param {user_responsesDeleteManyArgs} args - Arguments to filter User_responses to delete.
     * @example
     * // Delete a few User_responses
     * const { count } = await prisma.user_responses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_responsesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_responsesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_responsesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_responses
     * const user_responses = await prisma.user_responses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_responsesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, user_responsesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_responses.
     * @param {user_responsesUpsertArgs} args - Arguments to update or create a User_responses.
     * @example
     * // Update or create a User_responses
     * const user_responses = await prisma.user_responses.upsert({
     *   create: {
     *     // ... data to create a User_responses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_responses we want to update
     *   }
     * })
    **/
    upsert<T extends user_responsesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, user_responsesUpsertArgs<ExtArgs>>
    ): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of User_responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_responsesCountArgs} args - Arguments to filter User_responses to count.
     * @example
     * // Count the number of User_responses
     * const count = await prisma.user_responses.count({
     *   where: {
     *     // ... the filter for the User_responses we want to count
     *   }
     * })
    **/
    count<T extends user_responsesCountArgs>(
      args?: Subset<T, user_responsesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_responsesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_responsesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_responsesAggregateArgs>(args: Subset<T, User_responsesAggregateArgs>): Prisma.PrismaPromise<GetUser_responsesAggregateType<T>>

    /**
     * Group by User_responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_responsesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_responsesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_responsesGroupByArgs['orderBy'] }
        : { orderBy?: user_responsesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_responsesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_responsesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_responses model
   */
  readonly fields: user_responsesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_responses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_responsesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    questions<T extends questionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, questionsDefaultArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    quizzes<T extends quizzesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, quizzesDefaultArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user_responses model
   */ 
  interface user_responsesFieldRefs {
    readonly id: FieldRef<"user_responses", 'String'>
    readonly question_id: FieldRef<"user_responses", 'String'>
    readonly quiz_id: FieldRef<"user_responses", 'String'>
    readonly user_answer: FieldRef<"user_responses", 'String'>
    readonly is_correct: FieldRef<"user_responses", 'Boolean'>
    readonly created_at: FieldRef<"user_responses", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * user_responses findUnique
   */
  export type user_responsesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * Filter, which user_responses to fetch.
     */
    where: user_responsesWhereUniqueInput
  }


  /**
   * user_responses findUniqueOrThrow
   */
  export type user_responsesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * Filter, which user_responses to fetch.
     */
    where: user_responsesWhereUniqueInput
  }


  /**
   * user_responses findFirst
   */
  export type user_responsesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * Filter, which user_responses to fetch.
     */
    where?: user_responsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_responses to fetch.
     */
    orderBy?: user_responsesOrderByWithRelationInput | user_responsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_responses.
     */
    cursor?: user_responsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_responses.
     */
    distinct?: User_responsesScalarFieldEnum | User_responsesScalarFieldEnum[]
  }


  /**
   * user_responses findFirstOrThrow
   */
  export type user_responsesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * Filter, which user_responses to fetch.
     */
    where?: user_responsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_responses to fetch.
     */
    orderBy?: user_responsesOrderByWithRelationInput | user_responsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_responses.
     */
    cursor?: user_responsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_responses.
     */
    distinct?: User_responsesScalarFieldEnum | User_responsesScalarFieldEnum[]
  }


  /**
   * user_responses findMany
   */
  export type user_responsesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * Filter, which user_responses to fetch.
     */
    where?: user_responsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_responses to fetch.
     */
    orderBy?: user_responsesOrderByWithRelationInput | user_responsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_responses.
     */
    cursor?: user_responsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_responses.
     */
    skip?: number
    distinct?: User_responsesScalarFieldEnum | User_responsesScalarFieldEnum[]
  }


  /**
   * user_responses create
   */
  export type user_responsesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * The data needed to create a user_responses.
     */
    data: XOR<user_responsesCreateInput, user_responsesUncheckedCreateInput>
  }


  /**
   * user_responses createMany
   */
  export type user_responsesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_responses.
     */
    data: user_responsesCreateManyInput | user_responsesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user_responses update
   */
  export type user_responsesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * The data needed to update a user_responses.
     */
    data: XOR<user_responsesUpdateInput, user_responsesUncheckedUpdateInput>
    /**
     * Choose, which user_responses to update.
     */
    where: user_responsesWhereUniqueInput
  }


  /**
   * user_responses updateMany
   */
  export type user_responsesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_responses.
     */
    data: XOR<user_responsesUpdateManyMutationInput, user_responsesUncheckedUpdateManyInput>
    /**
     * Filter which user_responses to update
     */
    where?: user_responsesWhereInput
  }


  /**
   * user_responses upsert
   */
  export type user_responsesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * The filter to search for the user_responses to update in case it exists.
     */
    where: user_responsesWhereUniqueInput
    /**
     * In case the user_responses found by the `where` argument doesn't exist, create a new user_responses with this data.
     */
    create: XOR<user_responsesCreateInput, user_responsesUncheckedCreateInput>
    /**
     * In case the user_responses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_responsesUpdateInput, user_responsesUncheckedUpdateInput>
  }


  /**
   * user_responses delete
   */
  export type user_responsesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * Filter which user_responses to delete.
     */
    where: user_responsesWhereUniqueInput
  }


  /**
   * user_responses deleteMany
   */
  export type user_responsesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_responses to delete
     */
    where?: user_responsesWhereInput
  }


  /**
   * user_responses without action
   */
  export type user_responsesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_responsesInclude<ExtArgs> | null
  }



  /**
   * Model user_usage_data
   */

  export type AggregateUser_usage_data = {
    _count: User_usage_dataCountAggregateOutputType | null
    _avg: User_usage_dataAvgAggregateOutputType | null
    _sum: User_usage_dataSumAggregateOutputType | null
    _min: User_usage_dataMinAggregateOutputType | null
    _max: User_usage_dataMaxAggregateOutputType | null
  }

  export type User_usage_dataAvgAggregateOutputType = {
    prompt_tokens: number | null
    completion_tokens: number | null
    total_tokens: number | null
    quiz_seed: number | null
    count_Questions: number | null
    response_time_taken: number | null
  }

  export type User_usage_dataSumAggregateOutputType = {
    prompt_tokens: number | null
    completion_tokens: number | null
    total_tokens: number | null
    quiz_seed: bigint | null
    count_Questions: number | null
    response_time_taken: number | null
  }

  export type User_usage_dataMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    prompt_tokens: number | null
    completion_tokens: number | null
    total_tokens: number | null
    created_at: Date | null
    system_fingerprint: string | null
    quiz_seed: bigint | null
    used_model: string | null
    count_Questions: number | null
    response_time_taken: number | null
  }

  export type User_usage_dataMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    prompt_tokens: number | null
    completion_tokens: number | null
    total_tokens: number | null
    created_at: Date | null
    system_fingerprint: string | null
    quiz_seed: bigint | null
    used_model: string | null
    count_Questions: number | null
    response_time_taken: number | null
  }

  export type User_usage_dataCountAggregateOutputType = {
    id: number
    user_id: number
    prompt_tokens: number
    completion_tokens: number
    total_tokens: number
    created_at: number
    system_fingerprint: number
    quiz_seed: number
    used_model: number
    count_Questions: number
    response_time_taken: number
    _all: number
  }


  export type User_usage_dataAvgAggregateInputType = {
    prompt_tokens?: true
    completion_tokens?: true
    total_tokens?: true
    quiz_seed?: true
    count_Questions?: true
    response_time_taken?: true
  }

  export type User_usage_dataSumAggregateInputType = {
    prompt_tokens?: true
    completion_tokens?: true
    total_tokens?: true
    quiz_seed?: true
    count_Questions?: true
    response_time_taken?: true
  }

  export type User_usage_dataMinAggregateInputType = {
    id?: true
    user_id?: true
    prompt_tokens?: true
    completion_tokens?: true
    total_tokens?: true
    created_at?: true
    system_fingerprint?: true
    quiz_seed?: true
    used_model?: true
    count_Questions?: true
    response_time_taken?: true
  }

  export type User_usage_dataMaxAggregateInputType = {
    id?: true
    user_id?: true
    prompt_tokens?: true
    completion_tokens?: true
    total_tokens?: true
    created_at?: true
    system_fingerprint?: true
    quiz_seed?: true
    used_model?: true
    count_Questions?: true
    response_time_taken?: true
  }

  export type User_usage_dataCountAggregateInputType = {
    id?: true
    user_id?: true
    prompt_tokens?: true
    completion_tokens?: true
    total_tokens?: true
    created_at?: true
    system_fingerprint?: true
    quiz_seed?: true
    used_model?: true
    count_Questions?: true
    response_time_taken?: true
    _all?: true
  }

  export type User_usage_dataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_usage_data to aggregate.
     */
    where?: user_usage_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_usage_data to fetch.
     */
    orderBy?: user_usage_dataOrderByWithRelationInput | user_usage_dataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_usage_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_usage_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_usage_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_usage_data
    **/
    _count?: true | User_usage_dataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_usage_dataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_usage_dataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_usage_dataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_usage_dataMaxAggregateInputType
  }

  export type GetUser_usage_dataAggregateType<T extends User_usage_dataAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_usage_data]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_usage_data[P]>
      : GetScalarType<T[P], AggregateUser_usage_data[P]>
  }




  export type user_usage_dataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_usage_dataWhereInput
    orderBy?: user_usage_dataOrderByWithAggregationInput | user_usage_dataOrderByWithAggregationInput[]
    by: User_usage_dataScalarFieldEnum[] | User_usage_dataScalarFieldEnum
    having?: user_usage_dataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_usage_dataCountAggregateInputType | true
    _avg?: User_usage_dataAvgAggregateInputType
    _sum?: User_usage_dataSumAggregateInputType
    _min?: User_usage_dataMinAggregateInputType
    _max?: User_usage_dataMaxAggregateInputType
  }

  export type User_usage_dataGroupByOutputType = {
    id: string
    user_id: string
    prompt_tokens: number
    completion_tokens: number
    total_tokens: number
    created_at: Date
    system_fingerprint: string | null
    quiz_seed: bigint | null
    used_model: string | null
    count_Questions: number | null
    response_time_taken: number | null
    _count: User_usage_dataCountAggregateOutputType | null
    _avg: User_usage_dataAvgAggregateOutputType | null
    _sum: User_usage_dataSumAggregateOutputType | null
    _min: User_usage_dataMinAggregateOutputType | null
    _max: User_usage_dataMaxAggregateOutputType | null
  }

  type GetUser_usage_dataGroupByPayload<T extends user_usage_dataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_usage_dataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_usage_dataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_usage_dataGroupByOutputType[P]>
            : GetScalarType<T[P], User_usage_dataGroupByOutputType[P]>
        }
      >
    >


  export type user_usage_dataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    prompt_tokens?: boolean
    completion_tokens?: boolean
    total_tokens?: boolean
    created_at?: boolean
    system_fingerprint?: boolean
    quiz_seed?: boolean
    used_model?: boolean
    count_Questions?: boolean
    response_time_taken?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_usage_data"]>

  export type user_usage_dataSelectScalar = {
    id?: boolean
    user_id?: boolean
    prompt_tokens?: boolean
    completion_tokens?: boolean
    total_tokens?: boolean
    created_at?: boolean
    system_fingerprint?: boolean
    quiz_seed?: boolean
    used_model?: boolean
    count_Questions?: boolean
    response_time_taken?: boolean
  }

  export type user_usage_dataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }


  export type $user_usage_dataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_usage_data"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      prompt_tokens: number
      completion_tokens: number
      total_tokens: number
      created_at: Date
      system_fingerprint: string | null
      quiz_seed: bigint | null
      used_model: string | null
      count_Questions: number | null
      response_time_taken: number | null
    }, ExtArgs["result"]["user_usage_data"]>
    composites: {}
  }


  type user_usage_dataGetPayload<S extends boolean | null | undefined | user_usage_dataDefaultArgs> = $Result.GetResult<Prisma.$user_usage_dataPayload, S>

  type user_usage_dataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_usage_dataFindManyArgs, 'select' | 'include'> & {
      select?: User_usage_dataCountAggregateInputType | true
    }

  export interface user_usage_dataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_usage_data'], meta: { name: 'user_usage_data' } }
    /**
     * Find zero or one User_usage_data that matches the filter.
     * @param {user_usage_dataFindUniqueArgs} args - Arguments to find a User_usage_data
     * @example
     * // Get one User_usage_data
     * const user_usage_data = await prisma.user_usage_data.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_usage_dataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, user_usage_dataFindUniqueArgs<ExtArgs>>
    ): Prisma__user_usage_dataClient<$Result.GetResult<Prisma.$user_usage_dataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User_usage_data that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {user_usage_dataFindUniqueOrThrowArgs} args - Arguments to find a User_usage_data
     * @example
     * // Get one User_usage_data
     * const user_usage_data = await prisma.user_usage_data.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_usage_dataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_usage_dataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__user_usage_dataClient<$Result.GetResult<Prisma.$user_usage_dataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User_usage_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_usage_dataFindFirstArgs} args - Arguments to find a User_usage_data
     * @example
     * // Get one User_usage_data
     * const user_usage_data = await prisma.user_usage_data.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_usage_dataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, user_usage_dataFindFirstArgs<ExtArgs>>
    ): Prisma__user_usage_dataClient<$Result.GetResult<Prisma.$user_usage_dataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User_usage_data that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_usage_dataFindFirstOrThrowArgs} args - Arguments to find a User_usage_data
     * @example
     * // Get one User_usage_data
     * const user_usage_data = await prisma.user_usage_data.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_usage_dataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_usage_dataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__user_usage_dataClient<$Result.GetResult<Prisma.$user_usage_dataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more User_usage_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_usage_dataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_usage_data
     * const user_usage_data = await prisma.user_usage_data.findMany()
     * 
     * // Get first 10 User_usage_data
     * const user_usage_data = await prisma.user_usage_data.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_usage_dataWithIdOnly = await prisma.user_usage_data.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_usage_dataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_usage_dataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_usage_dataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User_usage_data.
     * @param {user_usage_dataCreateArgs} args - Arguments to create a User_usage_data.
     * @example
     * // Create one User_usage_data
     * const User_usage_data = await prisma.user_usage_data.create({
     *   data: {
     *     // ... data to create a User_usage_data
     *   }
     * })
     * 
    **/
    create<T extends user_usage_dataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, user_usage_dataCreateArgs<ExtArgs>>
    ): Prisma__user_usage_dataClient<$Result.GetResult<Prisma.$user_usage_dataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many User_usage_data.
     *     @param {user_usage_dataCreateManyArgs} args - Arguments to create many User_usage_data.
     *     @example
     *     // Create many User_usage_data
     *     const user_usage_data = await prisma.user_usage_data.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_usage_dataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_usage_dataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User_usage_data.
     * @param {user_usage_dataDeleteArgs} args - Arguments to delete one User_usage_data.
     * @example
     * // Delete one User_usage_data
     * const User_usage_data = await prisma.user_usage_data.delete({
     *   where: {
     *     // ... filter to delete one User_usage_data
     *   }
     * })
     * 
    **/
    delete<T extends user_usage_dataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, user_usage_dataDeleteArgs<ExtArgs>>
    ): Prisma__user_usage_dataClient<$Result.GetResult<Prisma.$user_usage_dataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User_usage_data.
     * @param {user_usage_dataUpdateArgs} args - Arguments to update one User_usage_data.
     * @example
     * // Update one User_usage_data
     * const user_usage_data = await prisma.user_usage_data.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_usage_dataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, user_usage_dataUpdateArgs<ExtArgs>>
    ): Prisma__user_usage_dataClient<$Result.GetResult<Prisma.$user_usage_dataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more User_usage_data.
     * @param {user_usage_dataDeleteManyArgs} args - Arguments to filter User_usage_data to delete.
     * @example
     * // Delete a few User_usage_data
     * const { count } = await prisma.user_usage_data.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_usage_dataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_usage_dataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_usage_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_usage_dataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_usage_data
     * const user_usage_data = await prisma.user_usage_data.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_usage_dataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, user_usage_dataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_usage_data.
     * @param {user_usage_dataUpsertArgs} args - Arguments to update or create a User_usage_data.
     * @example
     * // Update or create a User_usage_data
     * const user_usage_data = await prisma.user_usage_data.upsert({
     *   create: {
     *     // ... data to create a User_usage_data
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_usage_data we want to update
     *   }
     * })
    **/
    upsert<T extends user_usage_dataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, user_usage_dataUpsertArgs<ExtArgs>>
    ): Prisma__user_usage_dataClient<$Result.GetResult<Prisma.$user_usage_dataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of User_usage_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_usage_dataCountArgs} args - Arguments to filter User_usage_data to count.
     * @example
     * // Count the number of User_usage_data
     * const count = await prisma.user_usage_data.count({
     *   where: {
     *     // ... the filter for the User_usage_data we want to count
     *   }
     * })
    **/
    count<T extends user_usage_dataCountArgs>(
      args?: Subset<T, user_usage_dataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_usage_dataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_usage_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_usage_dataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_usage_dataAggregateArgs>(args: Subset<T, User_usage_dataAggregateArgs>): Prisma.PrismaPromise<GetUser_usage_dataAggregateType<T>>

    /**
     * Group by User_usage_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_usage_dataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_usage_dataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_usage_dataGroupByArgs['orderBy'] }
        : { orderBy?: user_usage_dataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_usage_dataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_usage_dataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_usage_data model
   */
  readonly fields: user_usage_dataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_usage_data.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_usage_dataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user_usage_data model
   */ 
  interface user_usage_dataFieldRefs {
    readonly id: FieldRef<"user_usage_data", 'String'>
    readonly user_id: FieldRef<"user_usage_data", 'String'>
    readonly prompt_tokens: FieldRef<"user_usage_data", 'Int'>
    readonly completion_tokens: FieldRef<"user_usage_data", 'Int'>
    readonly total_tokens: FieldRef<"user_usage_data", 'Int'>
    readonly created_at: FieldRef<"user_usage_data", 'DateTime'>
    readonly system_fingerprint: FieldRef<"user_usage_data", 'String'>
    readonly quiz_seed: FieldRef<"user_usage_data", 'BigInt'>
    readonly used_model: FieldRef<"user_usage_data", 'String'>
    readonly count_Questions: FieldRef<"user_usage_data", 'Int'>
    readonly response_time_taken: FieldRef<"user_usage_data", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * user_usage_data findUnique
   */
  export type user_usage_dataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_usage_data
     */
    select?: user_usage_dataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_usage_dataInclude<ExtArgs> | null
    /**
     * Filter, which user_usage_data to fetch.
     */
    where: user_usage_dataWhereUniqueInput
  }


  /**
   * user_usage_data findUniqueOrThrow
   */
  export type user_usage_dataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_usage_data
     */
    select?: user_usage_dataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_usage_dataInclude<ExtArgs> | null
    /**
     * Filter, which user_usage_data to fetch.
     */
    where: user_usage_dataWhereUniqueInput
  }


  /**
   * user_usage_data findFirst
   */
  export type user_usage_dataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_usage_data
     */
    select?: user_usage_dataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_usage_dataInclude<ExtArgs> | null
    /**
     * Filter, which user_usage_data to fetch.
     */
    where?: user_usage_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_usage_data to fetch.
     */
    orderBy?: user_usage_dataOrderByWithRelationInput | user_usage_dataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_usage_data.
     */
    cursor?: user_usage_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_usage_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_usage_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_usage_data.
     */
    distinct?: User_usage_dataScalarFieldEnum | User_usage_dataScalarFieldEnum[]
  }


  /**
   * user_usage_data findFirstOrThrow
   */
  export type user_usage_dataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_usage_data
     */
    select?: user_usage_dataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_usage_dataInclude<ExtArgs> | null
    /**
     * Filter, which user_usage_data to fetch.
     */
    where?: user_usage_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_usage_data to fetch.
     */
    orderBy?: user_usage_dataOrderByWithRelationInput | user_usage_dataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_usage_data.
     */
    cursor?: user_usage_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_usage_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_usage_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_usage_data.
     */
    distinct?: User_usage_dataScalarFieldEnum | User_usage_dataScalarFieldEnum[]
  }


  /**
   * user_usage_data findMany
   */
  export type user_usage_dataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_usage_data
     */
    select?: user_usage_dataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_usage_dataInclude<ExtArgs> | null
    /**
     * Filter, which user_usage_data to fetch.
     */
    where?: user_usage_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_usage_data to fetch.
     */
    orderBy?: user_usage_dataOrderByWithRelationInput | user_usage_dataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_usage_data.
     */
    cursor?: user_usage_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_usage_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_usage_data.
     */
    skip?: number
    distinct?: User_usage_dataScalarFieldEnum | User_usage_dataScalarFieldEnum[]
  }


  /**
   * user_usage_data create
   */
  export type user_usage_dataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_usage_data
     */
    select?: user_usage_dataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_usage_dataInclude<ExtArgs> | null
    /**
     * The data needed to create a user_usage_data.
     */
    data: XOR<user_usage_dataCreateInput, user_usage_dataUncheckedCreateInput>
  }


  /**
   * user_usage_data createMany
   */
  export type user_usage_dataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_usage_data.
     */
    data: user_usage_dataCreateManyInput | user_usage_dataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user_usage_data update
   */
  export type user_usage_dataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_usage_data
     */
    select?: user_usage_dataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_usage_dataInclude<ExtArgs> | null
    /**
     * The data needed to update a user_usage_data.
     */
    data: XOR<user_usage_dataUpdateInput, user_usage_dataUncheckedUpdateInput>
    /**
     * Choose, which user_usage_data to update.
     */
    where: user_usage_dataWhereUniqueInput
  }


  /**
   * user_usage_data updateMany
   */
  export type user_usage_dataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_usage_data.
     */
    data: XOR<user_usage_dataUpdateManyMutationInput, user_usage_dataUncheckedUpdateManyInput>
    /**
     * Filter which user_usage_data to update
     */
    where?: user_usage_dataWhereInput
  }


  /**
   * user_usage_data upsert
   */
  export type user_usage_dataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_usage_data
     */
    select?: user_usage_dataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_usage_dataInclude<ExtArgs> | null
    /**
     * The filter to search for the user_usage_data to update in case it exists.
     */
    where: user_usage_dataWhereUniqueInput
    /**
     * In case the user_usage_data found by the `where` argument doesn't exist, create a new user_usage_data with this data.
     */
    create: XOR<user_usage_dataCreateInput, user_usage_dataUncheckedCreateInput>
    /**
     * In case the user_usage_data was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_usage_dataUpdateInput, user_usage_dataUncheckedUpdateInput>
  }


  /**
   * user_usage_data delete
   */
  export type user_usage_dataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_usage_data
     */
    select?: user_usage_dataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_usage_dataInclude<ExtArgs> | null
    /**
     * Filter which user_usage_data to delete.
     */
    where: user_usage_dataWhereUniqueInput
  }


  /**
   * user_usage_data deleteMany
   */
  export type user_usage_dataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_usage_data to delete
     */
    where?: user_usage_dataWhereInput
  }


  /**
   * user_usage_data without action
   */
  export type user_usage_dataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_usage_data
     */
    select?: user_usage_dataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_usage_dataInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const QuestionsScalarFieldEnum: {
    id: 'id',
    quiz_id: 'quiz_id',
    text: 'text',
    options: 'options',
    correct_answer: 'correct_answer',
    created_at: 'created_at'
  };

  export type QuestionsScalarFieldEnum = (typeof QuestionsScalarFieldEnum)[keyof typeof QuestionsScalarFieldEnum]


  export const QuizzesScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    quiz_title: 'quiz_title',
    created_at: 'created_at',
    total_time_taken: 'total_time_taken',
    correct_answers_count: 'correct_answers_count'
  };

  export type QuizzesScalarFieldEnum = (typeof QuizzesScalarFieldEnum)[keyof typeof QuizzesScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    created_at: 'created_at',
    password: 'password'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const User_responsesScalarFieldEnum: {
    id: 'id',
    question_id: 'question_id',
    quiz_id: 'quiz_id',
    user_answer: 'user_answer',
    is_correct: 'is_correct',
    created_at: 'created_at'
  };

  export type User_responsesScalarFieldEnum = (typeof User_responsesScalarFieldEnum)[keyof typeof User_responsesScalarFieldEnum]


  export const User_usage_dataScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    prompt_tokens: 'prompt_tokens',
    completion_tokens: 'completion_tokens',
    total_tokens: 'total_tokens',
    created_at: 'created_at',
    system_fingerprint: 'system_fingerprint',
    quiz_seed: 'quiz_seed',
    used_model: 'used_model',
    count_Questions: 'count_Questions',
    response_time_taken: 'response_time_taken'
  };

  export type User_usage_dataScalarFieldEnum = (typeof User_usage_dataScalarFieldEnum)[keyof typeof User_usage_dataScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type questionsWhereInput = {
    AND?: questionsWhereInput | questionsWhereInput[]
    OR?: questionsWhereInput[]
    NOT?: questionsWhereInput | questionsWhereInput[]
    id?: UuidFilter<"questions"> | string
    quiz_id?: UuidFilter<"questions"> | string
    text?: StringFilter<"questions"> | string
    options?: StringNullableListFilter<"questions">
    correct_answer?: StringFilter<"questions"> | string
    created_at?: DateTimeFilter<"questions"> | Date | string
    quizzes?: XOR<QuizzesRelationFilter, quizzesWhereInput>
    user_responses?: User_responsesListRelationFilter
  }

  export type questionsOrderByWithRelationInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    text?: SortOrder
    options?: SortOrder
    correct_answer?: SortOrder
    created_at?: SortOrder
    quizzes?: quizzesOrderByWithRelationInput
    user_responses?: user_responsesOrderByRelationAggregateInput
  }

  export type questionsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: questionsWhereInput | questionsWhereInput[]
    OR?: questionsWhereInput[]
    NOT?: questionsWhereInput | questionsWhereInput[]
    quiz_id?: UuidFilter<"questions"> | string
    text?: StringFilter<"questions"> | string
    options?: StringNullableListFilter<"questions">
    correct_answer?: StringFilter<"questions"> | string
    created_at?: DateTimeFilter<"questions"> | Date | string
    quizzes?: XOR<QuizzesRelationFilter, quizzesWhereInput>
    user_responses?: User_responsesListRelationFilter
  }, "id">

  export type questionsOrderByWithAggregationInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    text?: SortOrder
    options?: SortOrder
    correct_answer?: SortOrder
    created_at?: SortOrder
    _count?: questionsCountOrderByAggregateInput
    _max?: questionsMaxOrderByAggregateInput
    _min?: questionsMinOrderByAggregateInput
  }

  export type questionsScalarWhereWithAggregatesInput = {
    AND?: questionsScalarWhereWithAggregatesInput | questionsScalarWhereWithAggregatesInput[]
    OR?: questionsScalarWhereWithAggregatesInput[]
    NOT?: questionsScalarWhereWithAggregatesInput | questionsScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"questions"> | string
    quiz_id?: UuidWithAggregatesFilter<"questions"> | string
    text?: StringWithAggregatesFilter<"questions"> | string
    options?: StringNullableListFilter<"questions">
    correct_answer?: StringWithAggregatesFilter<"questions"> | string
    created_at?: DateTimeWithAggregatesFilter<"questions"> | Date | string
  }

  export type quizzesWhereInput = {
    AND?: quizzesWhereInput | quizzesWhereInput[]
    OR?: quizzesWhereInput[]
    NOT?: quizzesWhereInput | quizzesWhereInput[]
    id?: UuidFilter<"quizzes"> | string
    user_id?: UuidFilter<"quizzes"> | string
    quiz_title?: StringFilter<"quizzes"> | string
    created_at?: DateTimeFilter<"quizzes"> | Date | string
    total_time_taken?: IntNullableFilter<"quizzes"> | number | null
    correct_answers_count?: IntFilter<"quizzes"> | number
    questions?: QuestionsListRelationFilter
    users?: XOR<UsersRelationFilter, usersWhereInput>
    user_responses?: User_responsesListRelationFilter
  }

  export type quizzesOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    quiz_title?: SortOrder
    created_at?: SortOrder
    total_time_taken?: SortOrderInput | SortOrder
    correct_answers_count?: SortOrder
    questions?: questionsOrderByRelationAggregateInput
    users?: usersOrderByWithRelationInput
    user_responses?: user_responsesOrderByRelationAggregateInput
  }

  export type quizzesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: quizzesWhereInput | quizzesWhereInput[]
    OR?: quizzesWhereInput[]
    NOT?: quizzesWhereInput | quizzesWhereInput[]
    user_id?: UuidFilter<"quizzes"> | string
    quiz_title?: StringFilter<"quizzes"> | string
    created_at?: DateTimeFilter<"quizzes"> | Date | string
    total_time_taken?: IntNullableFilter<"quizzes"> | number | null
    correct_answers_count?: IntFilter<"quizzes"> | number
    questions?: QuestionsListRelationFilter
    users?: XOR<UsersRelationFilter, usersWhereInput>
    user_responses?: User_responsesListRelationFilter
  }, "id">

  export type quizzesOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    quiz_title?: SortOrder
    created_at?: SortOrder
    total_time_taken?: SortOrderInput | SortOrder
    correct_answers_count?: SortOrder
    _count?: quizzesCountOrderByAggregateInput
    _avg?: quizzesAvgOrderByAggregateInput
    _max?: quizzesMaxOrderByAggregateInput
    _min?: quizzesMinOrderByAggregateInput
    _sum?: quizzesSumOrderByAggregateInput
  }

  export type quizzesScalarWhereWithAggregatesInput = {
    AND?: quizzesScalarWhereWithAggregatesInput | quizzesScalarWhereWithAggregatesInput[]
    OR?: quizzesScalarWhereWithAggregatesInput[]
    NOT?: quizzesScalarWhereWithAggregatesInput | quizzesScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"quizzes"> | string
    user_id?: UuidWithAggregatesFilter<"quizzes"> | string
    quiz_title?: StringWithAggregatesFilter<"quizzes"> | string
    created_at?: DateTimeWithAggregatesFilter<"quizzes"> | Date | string
    total_time_taken?: IntNullableWithAggregatesFilter<"quizzes"> | number | null
    correct_answers_count?: IntWithAggregatesFilter<"quizzes"> | number
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: UuidFilter<"users"> | string
    email?: StringFilter<"users"> | string
    created_at?: DateTimeFilter<"users"> | Date | string
    password?: StringNullableFilter<"users"> | string | null
    quizzes?: QuizzesListRelationFilter
    user_usage_data?: User_usage_dataListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    password?: SortOrderInput | SortOrder
    quizzes?: quizzesOrderByRelationAggregateInput
    user_usage_data?: user_usage_dataOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    email?: StringFilter<"users"> | string
    created_at?: DateTimeFilter<"users"> | Date | string
    password?: StringNullableFilter<"users"> | string | null
    quizzes?: QuizzesListRelationFilter
    user_usage_data?: User_usage_dataListRelationFilter
  }, "id">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    password?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    created_at?: DateTimeWithAggregatesFilter<"users"> | Date | string
    password?: StringNullableWithAggregatesFilter<"users"> | string | null
  }

  export type user_responsesWhereInput = {
    AND?: user_responsesWhereInput | user_responsesWhereInput[]
    OR?: user_responsesWhereInput[]
    NOT?: user_responsesWhereInput | user_responsesWhereInput[]
    id?: UuidFilter<"user_responses"> | string
    question_id?: UuidFilter<"user_responses"> | string
    quiz_id?: UuidFilter<"user_responses"> | string
    user_answer?: StringFilter<"user_responses"> | string
    is_correct?: BoolFilter<"user_responses"> | boolean
    created_at?: DateTimeFilter<"user_responses"> | Date | string
    questions?: XOR<QuestionsRelationFilter, questionsWhereInput>
    quizzes?: XOR<QuizzesRelationFilter, quizzesWhereInput>
  }

  export type user_responsesOrderByWithRelationInput = {
    id?: SortOrder
    question_id?: SortOrder
    quiz_id?: SortOrder
    user_answer?: SortOrder
    is_correct?: SortOrder
    created_at?: SortOrder
    questions?: questionsOrderByWithRelationInput
    quizzes?: quizzesOrderByWithRelationInput
  }

  export type user_responsesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: user_responsesWhereInput | user_responsesWhereInput[]
    OR?: user_responsesWhereInput[]
    NOT?: user_responsesWhereInput | user_responsesWhereInput[]
    question_id?: UuidFilter<"user_responses"> | string
    quiz_id?: UuidFilter<"user_responses"> | string
    user_answer?: StringFilter<"user_responses"> | string
    is_correct?: BoolFilter<"user_responses"> | boolean
    created_at?: DateTimeFilter<"user_responses"> | Date | string
    questions?: XOR<QuestionsRelationFilter, questionsWhereInput>
    quizzes?: XOR<QuizzesRelationFilter, quizzesWhereInput>
  }, "id">

  export type user_responsesOrderByWithAggregationInput = {
    id?: SortOrder
    question_id?: SortOrder
    quiz_id?: SortOrder
    user_answer?: SortOrder
    is_correct?: SortOrder
    created_at?: SortOrder
    _count?: user_responsesCountOrderByAggregateInput
    _max?: user_responsesMaxOrderByAggregateInput
    _min?: user_responsesMinOrderByAggregateInput
  }

  export type user_responsesScalarWhereWithAggregatesInput = {
    AND?: user_responsesScalarWhereWithAggregatesInput | user_responsesScalarWhereWithAggregatesInput[]
    OR?: user_responsesScalarWhereWithAggregatesInput[]
    NOT?: user_responsesScalarWhereWithAggregatesInput | user_responsesScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"user_responses"> | string
    question_id?: UuidWithAggregatesFilter<"user_responses"> | string
    quiz_id?: UuidWithAggregatesFilter<"user_responses"> | string
    user_answer?: StringWithAggregatesFilter<"user_responses"> | string
    is_correct?: BoolWithAggregatesFilter<"user_responses"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"user_responses"> | Date | string
  }

  export type user_usage_dataWhereInput = {
    AND?: user_usage_dataWhereInput | user_usage_dataWhereInput[]
    OR?: user_usage_dataWhereInput[]
    NOT?: user_usage_dataWhereInput | user_usage_dataWhereInput[]
    id?: UuidFilter<"user_usage_data"> | string
    user_id?: UuidFilter<"user_usage_data"> | string
    prompt_tokens?: IntFilter<"user_usage_data"> | number
    completion_tokens?: IntFilter<"user_usage_data"> | number
    total_tokens?: IntFilter<"user_usage_data"> | number
    created_at?: DateTimeFilter<"user_usage_data"> | Date | string
    system_fingerprint?: StringNullableFilter<"user_usage_data"> | string | null
    quiz_seed?: BigIntNullableFilter<"user_usage_data"> | bigint | number | null
    used_model?: StringNullableFilter<"user_usage_data"> | string | null
    count_Questions?: IntNullableFilter<"user_usage_data"> | number | null
    response_time_taken?: FloatNullableFilter<"user_usage_data"> | number | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type user_usage_dataOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    prompt_tokens?: SortOrder
    completion_tokens?: SortOrder
    total_tokens?: SortOrder
    created_at?: SortOrder
    system_fingerprint?: SortOrderInput | SortOrder
    quiz_seed?: SortOrderInput | SortOrder
    used_model?: SortOrderInput | SortOrder
    count_Questions?: SortOrderInput | SortOrder
    response_time_taken?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type user_usage_dataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    quiz_seed?: bigint | number
    AND?: user_usage_dataWhereInput | user_usage_dataWhereInput[]
    OR?: user_usage_dataWhereInput[]
    NOT?: user_usage_dataWhereInput | user_usage_dataWhereInput[]
    user_id?: UuidFilter<"user_usage_data"> | string
    prompt_tokens?: IntFilter<"user_usage_data"> | number
    completion_tokens?: IntFilter<"user_usage_data"> | number
    total_tokens?: IntFilter<"user_usage_data"> | number
    created_at?: DateTimeFilter<"user_usage_data"> | Date | string
    system_fingerprint?: StringNullableFilter<"user_usage_data"> | string | null
    used_model?: StringNullableFilter<"user_usage_data"> | string | null
    count_Questions?: IntNullableFilter<"user_usage_data"> | number | null
    response_time_taken?: FloatNullableFilter<"user_usage_data"> | number | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }, "id" | "quiz_seed">

  export type user_usage_dataOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    prompt_tokens?: SortOrder
    completion_tokens?: SortOrder
    total_tokens?: SortOrder
    created_at?: SortOrder
    system_fingerprint?: SortOrderInput | SortOrder
    quiz_seed?: SortOrderInput | SortOrder
    used_model?: SortOrderInput | SortOrder
    count_Questions?: SortOrderInput | SortOrder
    response_time_taken?: SortOrderInput | SortOrder
    _count?: user_usage_dataCountOrderByAggregateInput
    _avg?: user_usage_dataAvgOrderByAggregateInput
    _max?: user_usage_dataMaxOrderByAggregateInput
    _min?: user_usage_dataMinOrderByAggregateInput
    _sum?: user_usage_dataSumOrderByAggregateInput
  }

  export type user_usage_dataScalarWhereWithAggregatesInput = {
    AND?: user_usage_dataScalarWhereWithAggregatesInput | user_usage_dataScalarWhereWithAggregatesInput[]
    OR?: user_usage_dataScalarWhereWithAggregatesInput[]
    NOT?: user_usage_dataScalarWhereWithAggregatesInput | user_usage_dataScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"user_usage_data"> | string
    user_id?: UuidWithAggregatesFilter<"user_usage_data"> | string
    prompt_tokens?: IntWithAggregatesFilter<"user_usage_data"> | number
    completion_tokens?: IntWithAggregatesFilter<"user_usage_data"> | number
    total_tokens?: IntWithAggregatesFilter<"user_usage_data"> | number
    created_at?: DateTimeWithAggregatesFilter<"user_usage_data"> | Date | string
    system_fingerprint?: StringNullableWithAggregatesFilter<"user_usage_data"> | string | null
    quiz_seed?: BigIntNullableWithAggregatesFilter<"user_usage_data"> | bigint | number | null
    used_model?: StringNullableWithAggregatesFilter<"user_usage_data"> | string | null
    count_Questions?: IntNullableWithAggregatesFilter<"user_usage_data"> | number | null
    response_time_taken?: FloatNullableWithAggregatesFilter<"user_usage_data"> | number | null
  }

  export type questionsCreateInput = {
    id?: string
    text: string
    options?: questionsCreateoptionsInput | string[]
    correct_answer: string
    created_at?: Date | string
    quizzes: quizzesCreateNestedOneWithoutQuestionsInput
    user_responses?: user_responsesCreateNestedManyWithoutQuestionsInput
  }

  export type questionsUncheckedCreateInput = {
    id?: string
    quiz_id: string
    text: string
    options?: questionsCreateoptionsInput | string[]
    correct_answer: string
    created_at?: Date | string
    user_responses?: user_responsesUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type questionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: questionsUpdateoptionsInput | string[]
    correct_answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    quizzes?: quizzesUpdateOneRequiredWithoutQuestionsNestedInput
    user_responses?: user_responsesUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quiz_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: questionsUpdateoptionsInput | string[]
    correct_answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_responses?: user_responsesUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsCreateManyInput = {
    id?: string
    quiz_id: string
    text: string
    options?: questionsCreateoptionsInput | string[]
    correct_answer: string
    created_at?: Date | string
  }

  export type questionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: questionsUpdateoptionsInput | string[]
    correct_answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type questionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    quiz_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: questionsUpdateoptionsInput | string[]
    correct_answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type quizzesCreateInput = {
    id?: string
    quiz_title: string
    created_at?: Date | string
    total_time_taken?: number | null
    correct_answers_count?: number
    questions?: questionsCreateNestedManyWithoutQuizzesInput
    users: usersCreateNestedOneWithoutQuizzesInput
    user_responses?: user_responsesCreateNestedManyWithoutQuizzesInput
  }

  export type quizzesUncheckedCreateInput = {
    id?: string
    user_id: string
    quiz_title: string
    created_at?: Date | string
    total_time_taken?: number | null
    correct_answers_count?: number
    questions?: questionsUncheckedCreateNestedManyWithoutQuizzesInput
    user_responses?: user_responsesUncheckedCreateNestedManyWithoutQuizzesInput
  }

  export type quizzesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quiz_title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    total_time_taken?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: IntFieldUpdateOperationsInput | number
    questions?: questionsUpdateManyWithoutQuizzesNestedInput
    users?: usersUpdateOneRequiredWithoutQuizzesNestedInput
    user_responses?: user_responsesUpdateManyWithoutQuizzesNestedInput
  }

  export type quizzesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    quiz_title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    total_time_taken?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: IntFieldUpdateOperationsInput | number
    questions?: questionsUncheckedUpdateManyWithoutQuizzesNestedInput
    user_responses?: user_responsesUncheckedUpdateManyWithoutQuizzesNestedInput
  }

  export type quizzesCreateManyInput = {
    id?: string
    user_id: string
    quiz_title: string
    created_at?: Date | string
    total_time_taken?: number | null
    correct_answers_count?: number
  }

  export type quizzesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quiz_title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    total_time_taken?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: IntFieldUpdateOperationsInput | number
  }

  export type quizzesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    quiz_title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    total_time_taken?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: IntFieldUpdateOperationsInput | number
  }

  export type usersCreateInput = {
    id?: string
    email: string
    created_at?: Date | string
    password?: string | null
    quizzes?: quizzesCreateNestedManyWithoutUsersInput
    user_usage_data?: user_usage_dataCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: string
    email: string
    created_at?: Date | string
    password?: string | null
    quizzes?: quizzesUncheckedCreateNestedManyWithoutUsersInput
    user_usage_data?: user_usage_dataUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    quizzes?: quizzesUpdateManyWithoutUsersNestedInput
    user_usage_data?: user_usage_dataUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    quizzes?: quizzesUncheckedUpdateManyWithoutUsersNestedInput
    user_usage_data?: user_usage_dataUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: string
    email: string
    created_at?: Date | string
    password?: string | null
  }

  export type usersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_responsesCreateInput = {
    id?: string
    user_answer: string
    is_correct: boolean
    created_at?: Date | string
    questions: questionsCreateNestedOneWithoutUser_responsesInput
    quizzes: quizzesCreateNestedOneWithoutUser_responsesInput
  }

  export type user_responsesUncheckedCreateInput = {
    id?: string
    question_id: string
    quiz_id: string
    user_answer: string
    is_correct: boolean
    created_at?: Date | string
  }

  export type user_responsesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_answer?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: questionsUpdateOneRequiredWithoutUser_responsesNestedInput
    quizzes?: quizzesUpdateOneRequiredWithoutUser_responsesNestedInput
  }

  export type user_responsesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    quiz_id?: StringFieldUpdateOperationsInput | string
    user_answer?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_responsesCreateManyInput = {
    id?: string
    question_id: string
    quiz_id: string
    user_answer: string
    is_correct: boolean
    created_at?: Date | string
  }

  export type user_responsesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_answer?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_responsesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    quiz_id?: StringFieldUpdateOperationsInput | string
    user_answer?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_usage_dataCreateInput = {
    id?: string
    prompt_tokens: number
    completion_tokens: number
    total_tokens: number
    created_at?: Date | string
    system_fingerprint?: string | null
    quiz_seed?: bigint | number | null
    used_model?: string | null
    count_Questions?: number | null
    response_time_taken?: number | null
    users: usersCreateNestedOneWithoutUser_usage_dataInput
  }

  export type user_usage_dataUncheckedCreateInput = {
    id?: string
    user_id: string
    prompt_tokens: number
    completion_tokens: number
    total_tokens: number
    created_at?: Date | string
    system_fingerprint?: string | null
    quiz_seed?: bigint | number | null
    used_model?: string | null
    count_Questions?: number | null
    response_time_taken?: number | null
  }

  export type user_usage_dataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt_tokens?: IntFieldUpdateOperationsInput | number
    completion_tokens?: IntFieldUpdateOperationsInput | number
    total_tokens?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    system_fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    quiz_seed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    used_model?: NullableStringFieldUpdateOperationsInput | string | null
    count_Questions?: NullableIntFieldUpdateOperationsInput | number | null
    response_time_taken?: NullableFloatFieldUpdateOperationsInput | number | null
    users?: usersUpdateOneRequiredWithoutUser_usage_dataNestedInput
  }

  export type user_usage_dataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    prompt_tokens?: IntFieldUpdateOperationsInput | number
    completion_tokens?: IntFieldUpdateOperationsInput | number
    total_tokens?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    system_fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    quiz_seed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    used_model?: NullableStringFieldUpdateOperationsInput | string | null
    count_Questions?: NullableIntFieldUpdateOperationsInput | number | null
    response_time_taken?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type user_usage_dataCreateManyInput = {
    id?: string
    user_id: string
    prompt_tokens: number
    completion_tokens: number
    total_tokens: number
    created_at?: Date | string
    system_fingerprint?: string | null
    quiz_seed?: bigint | number | null
    used_model?: string | null
    count_Questions?: number | null
    response_time_taken?: number | null
  }

  export type user_usage_dataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt_tokens?: IntFieldUpdateOperationsInput | number
    completion_tokens?: IntFieldUpdateOperationsInput | number
    total_tokens?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    system_fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    quiz_seed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    used_model?: NullableStringFieldUpdateOperationsInput | string | null
    count_Questions?: NullableIntFieldUpdateOperationsInput | number | null
    response_time_taken?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type user_usage_dataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    prompt_tokens?: IntFieldUpdateOperationsInput | number
    completion_tokens?: IntFieldUpdateOperationsInput | number
    total_tokens?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    system_fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    quiz_seed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    used_model?: NullableStringFieldUpdateOperationsInput | string | null
    count_Questions?: NullableIntFieldUpdateOperationsInput | number | null
    response_time_taken?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type QuizzesRelationFilter = {
    is?: quizzesWhereInput
    isNot?: quizzesWhereInput
  }

  export type User_responsesListRelationFilter = {
    every?: user_responsesWhereInput
    some?: user_responsesWhereInput
    none?: user_responsesWhereInput
  }

  export type user_responsesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type questionsCountOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    text?: SortOrder
    options?: SortOrder
    correct_answer?: SortOrder
    created_at?: SortOrder
  }

  export type questionsMaxOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    text?: SortOrder
    correct_answer?: SortOrder
    created_at?: SortOrder
  }

  export type questionsMinOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    text?: SortOrder
    correct_answer?: SortOrder
    created_at?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type QuestionsListRelationFilter = {
    every?: questionsWhereInput
    some?: questionsWhereInput
    none?: questionsWhereInput
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type questionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type quizzesCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    quiz_title?: SortOrder
    created_at?: SortOrder
    total_time_taken?: SortOrder
    correct_answers_count?: SortOrder
  }

  export type quizzesAvgOrderByAggregateInput = {
    total_time_taken?: SortOrder
    correct_answers_count?: SortOrder
  }

  export type quizzesMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    quiz_title?: SortOrder
    created_at?: SortOrder
    total_time_taken?: SortOrder
    correct_answers_count?: SortOrder
  }

  export type quizzesMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    quiz_title?: SortOrder
    created_at?: SortOrder
    total_time_taken?: SortOrder
    correct_answers_count?: SortOrder
  }

  export type quizzesSumOrderByAggregateInput = {
    total_time_taken?: SortOrder
    correct_answers_count?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type QuizzesListRelationFilter = {
    every?: quizzesWhereInput
    some?: quizzesWhereInput
    none?: quizzesWhereInput
  }

  export type User_usage_dataListRelationFilter = {
    every?: user_usage_dataWhereInput
    some?: user_usage_dataWhereInput
    none?: user_usage_dataWhereInput
  }

  export type quizzesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_usage_dataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    password?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    password?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    password?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type QuestionsRelationFilter = {
    is?: questionsWhereInput
    isNot?: questionsWhereInput
  }

  export type user_responsesCountOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
    quiz_id?: SortOrder
    user_answer?: SortOrder
    is_correct?: SortOrder
    created_at?: SortOrder
  }

  export type user_responsesMaxOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
    quiz_id?: SortOrder
    user_answer?: SortOrder
    is_correct?: SortOrder
    created_at?: SortOrder
  }

  export type user_responsesMinOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
    quiz_id?: SortOrder
    user_answer?: SortOrder
    is_correct?: SortOrder
    created_at?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type user_usage_dataCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    prompt_tokens?: SortOrder
    completion_tokens?: SortOrder
    total_tokens?: SortOrder
    created_at?: SortOrder
    system_fingerprint?: SortOrder
    quiz_seed?: SortOrder
    used_model?: SortOrder
    count_Questions?: SortOrder
    response_time_taken?: SortOrder
  }

  export type user_usage_dataAvgOrderByAggregateInput = {
    prompt_tokens?: SortOrder
    completion_tokens?: SortOrder
    total_tokens?: SortOrder
    quiz_seed?: SortOrder
    count_Questions?: SortOrder
    response_time_taken?: SortOrder
  }

  export type user_usage_dataMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    prompt_tokens?: SortOrder
    completion_tokens?: SortOrder
    total_tokens?: SortOrder
    created_at?: SortOrder
    system_fingerprint?: SortOrder
    quiz_seed?: SortOrder
    used_model?: SortOrder
    count_Questions?: SortOrder
    response_time_taken?: SortOrder
  }

  export type user_usage_dataMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    prompt_tokens?: SortOrder
    completion_tokens?: SortOrder
    total_tokens?: SortOrder
    created_at?: SortOrder
    system_fingerprint?: SortOrder
    quiz_seed?: SortOrder
    used_model?: SortOrder
    count_Questions?: SortOrder
    response_time_taken?: SortOrder
  }

  export type user_usage_dataSumOrderByAggregateInput = {
    prompt_tokens?: SortOrder
    completion_tokens?: SortOrder
    total_tokens?: SortOrder
    quiz_seed?: SortOrder
    count_Questions?: SortOrder
    response_time_taken?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type questionsCreateoptionsInput = {
    set: string[]
  }

  export type quizzesCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<quizzesCreateWithoutQuestionsInput, quizzesUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutQuestionsInput
    connect?: quizzesWhereUniqueInput
  }

  export type user_responsesCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<user_responsesCreateWithoutQuestionsInput, user_responsesUncheckedCreateWithoutQuestionsInput> | user_responsesCreateWithoutQuestionsInput[] | user_responsesUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutQuestionsInput | user_responsesCreateOrConnectWithoutQuestionsInput[]
    createMany?: user_responsesCreateManyQuestionsInputEnvelope
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
  }

  export type user_responsesUncheckedCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<user_responsesCreateWithoutQuestionsInput, user_responsesUncheckedCreateWithoutQuestionsInput> | user_responsesCreateWithoutQuestionsInput[] | user_responsesUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutQuestionsInput | user_responsesCreateOrConnectWithoutQuestionsInput[]
    createMany?: user_responsesCreateManyQuestionsInputEnvelope
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type questionsUpdateoptionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type quizzesUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<quizzesCreateWithoutQuestionsInput, quizzesUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutQuestionsInput
    upsert?: quizzesUpsertWithoutQuestionsInput
    connect?: quizzesWhereUniqueInput
    update?: XOR<XOR<quizzesUpdateToOneWithWhereWithoutQuestionsInput, quizzesUpdateWithoutQuestionsInput>, quizzesUncheckedUpdateWithoutQuestionsInput>
  }

  export type user_responsesUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<user_responsesCreateWithoutQuestionsInput, user_responsesUncheckedCreateWithoutQuestionsInput> | user_responsesCreateWithoutQuestionsInput[] | user_responsesUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutQuestionsInput | user_responsesCreateOrConnectWithoutQuestionsInput[]
    upsert?: user_responsesUpsertWithWhereUniqueWithoutQuestionsInput | user_responsesUpsertWithWhereUniqueWithoutQuestionsInput[]
    createMany?: user_responsesCreateManyQuestionsInputEnvelope
    set?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    disconnect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    delete?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    update?: user_responsesUpdateWithWhereUniqueWithoutQuestionsInput | user_responsesUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: user_responsesUpdateManyWithWhereWithoutQuestionsInput | user_responsesUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
  }

  export type user_responsesUncheckedUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<user_responsesCreateWithoutQuestionsInput, user_responsesUncheckedCreateWithoutQuestionsInput> | user_responsesCreateWithoutQuestionsInput[] | user_responsesUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutQuestionsInput | user_responsesCreateOrConnectWithoutQuestionsInput[]
    upsert?: user_responsesUpsertWithWhereUniqueWithoutQuestionsInput | user_responsesUpsertWithWhereUniqueWithoutQuestionsInput[]
    createMany?: user_responsesCreateManyQuestionsInputEnvelope
    set?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    disconnect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    delete?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    update?: user_responsesUpdateWithWhereUniqueWithoutQuestionsInput | user_responsesUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: user_responsesUpdateManyWithWhereWithoutQuestionsInput | user_responsesUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
  }

  export type questionsCreateNestedManyWithoutQuizzesInput = {
    create?: XOR<questionsCreateWithoutQuizzesInput, questionsUncheckedCreateWithoutQuizzesInput> | questionsCreateWithoutQuizzesInput[] | questionsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutQuizzesInput | questionsCreateOrConnectWithoutQuizzesInput[]
    createMany?: questionsCreateManyQuizzesInputEnvelope
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutQuizzesInput = {
    create?: XOR<usersCreateWithoutQuizzesInput, usersUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: usersCreateOrConnectWithoutQuizzesInput
    connect?: usersWhereUniqueInput
  }

  export type user_responsesCreateNestedManyWithoutQuizzesInput = {
    create?: XOR<user_responsesCreateWithoutQuizzesInput, user_responsesUncheckedCreateWithoutQuizzesInput> | user_responsesCreateWithoutQuizzesInput[] | user_responsesUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutQuizzesInput | user_responsesCreateOrConnectWithoutQuizzesInput[]
    createMany?: user_responsesCreateManyQuizzesInputEnvelope
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
  }

  export type questionsUncheckedCreateNestedManyWithoutQuizzesInput = {
    create?: XOR<questionsCreateWithoutQuizzesInput, questionsUncheckedCreateWithoutQuizzesInput> | questionsCreateWithoutQuizzesInput[] | questionsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutQuizzesInput | questionsCreateOrConnectWithoutQuizzesInput[]
    createMany?: questionsCreateManyQuizzesInputEnvelope
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
  }

  export type user_responsesUncheckedCreateNestedManyWithoutQuizzesInput = {
    create?: XOR<user_responsesCreateWithoutQuizzesInput, user_responsesUncheckedCreateWithoutQuizzesInput> | user_responsesCreateWithoutQuizzesInput[] | user_responsesUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutQuizzesInput | user_responsesCreateOrConnectWithoutQuizzesInput[]
    createMany?: user_responsesCreateManyQuizzesInputEnvelope
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type questionsUpdateManyWithoutQuizzesNestedInput = {
    create?: XOR<questionsCreateWithoutQuizzesInput, questionsUncheckedCreateWithoutQuizzesInput> | questionsCreateWithoutQuizzesInput[] | questionsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutQuizzesInput | questionsCreateOrConnectWithoutQuizzesInput[]
    upsert?: questionsUpsertWithWhereUniqueWithoutQuizzesInput | questionsUpsertWithWhereUniqueWithoutQuizzesInput[]
    createMany?: questionsCreateManyQuizzesInputEnvelope
    set?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    disconnect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    delete?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    update?: questionsUpdateWithWhereUniqueWithoutQuizzesInput | questionsUpdateWithWhereUniqueWithoutQuizzesInput[]
    updateMany?: questionsUpdateManyWithWhereWithoutQuizzesInput | questionsUpdateManyWithWhereWithoutQuizzesInput[]
    deleteMany?: questionsScalarWhereInput | questionsScalarWhereInput[]
  }

  export type usersUpdateOneRequiredWithoutQuizzesNestedInput = {
    create?: XOR<usersCreateWithoutQuizzesInput, usersUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: usersCreateOrConnectWithoutQuizzesInput
    upsert?: usersUpsertWithoutQuizzesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutQuizzesInput, usersUpdateWithoutQuizzesInput>, usersUncheckedUpdateWithoutQuizzesInput>
  }

  export type user_responsesUpdateManyWithoutQuizzesNestedInput = {
    create?: XOR<user_responsesCreateWithoutQuizzesInput, user_responsesUncheckedCreateWithoutQuizzesInput> | user_responsesCreateWithoutQuizzesInput[] | user_responsesUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutQuizzesInput | user_responsesCreateOrConnectWithoutQuizzesInput[]
    upsert?: user_responsesUpsertWithWhereUniqueWithoutQuizzesInput | user_responsesUpsertWithWhereUniqueWithoutQuizzesInput[]
    createMany?: user_responsesCreateManyQuizzesInputEnvelope
    set?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    disconnect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    delete?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    update?: user_responsesUpdateWithWhereUniqueWithoutQuizzesInput | user_responsesUpdateWithWhereUniqueWithoutQuizzesInput[]
    updateMany?: user_responsesUpdateManyWithWhereWithoutQuizzesInput | user_responsesUpdateManyWithWhereWithoutQuizzesInput[]
    deleteMany?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
  }

  export type questionsUncheckedUpdateManyWithoutQuizzesNestedInput = {
    create?: XOR<questionsCreateWithoutQuizzesInput, questionsUncheckedCreateWithoutQuizzesInput> | questionsCreateWithoutQuizzesInput[] | questionsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutQuizzesInput | questionsCreateOrConnectWithoutQuizzesInput[]
    upsert?: questionsUpsertWithWhereUniqueWithoutQuizzesInput | questionsUpsertWithWhereUniqueWithoutQuizzesInput[]
    createMany?: questionsCreateManyQuizzesInputEnvelope
    set?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    disconnect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    delete?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    update?: questionsUpdateWithWhereUniqueWithoutQuizzesInput | questionsUpdateWithWhereUniqueWithoutQuizzesInput[]
    updateMany?: questionsUpdateManyWithWhereWithoutQuizzesInput | questionsUpdateManyWithWhereWithoutQuizzesInput[]
    deleteMany?: questionsScalarWhereInput | questionsScalarWhereInput[]
  }

  export type user_responsesUncheckedUpdateManyWithoutQuizzesNestedInput = {
    create?: XOR<user_responsesCreateWithoutQuizzesInput, user_responsesUncheckedCreateWithoutQuizzesInput> | user_responsesCreateWithoutQuizzesInput[] | user_responsesUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutQuizzesInput | user_responsesCreateOrConnectWithoutQuizzesInput[]
    upsert?: user_responsesUpsertWithWhereUniqueWithoutQuizzesInput | user_responsesUpsertWithWhereUniqueWithoutQuizzesInput[]
    createMany?: user_responsesCreateManyQuizzesInputEnvelope
    set?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    disconnect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    delete?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    update?: user_responsesUpdateWithWhereUniqueWithoutQuizzesInput | user_responsesUpdateWithWhereUniqueWithoutQuizzesInput[]
    updateMany?: user_responsesUpdateManyWithWhereWithoutQuizzesInput | user_responsesUpdateManyWithWhereWithoutQuizzesInput[]
    deleteMany?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
  }

  export type quizzesCreateNestedManyWithoutUsersInput = {
    create?: XOR<quizzesCreateWithoutUsersInput, quizzesUncheckedCreateWithoutUsersInput> | quizzesCreateWithoutUsersInput[] | quizzesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutUsersInput | quizzesCreateOrConnectWithoutUsersInput[]
    createMany?: quizzesCreateManyUsersInputEnvelope
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
  }

  export type user_usage_dataCreateNestedManyWithoutUsersInput = {
    create?: XOR<user_usage_dataCreateWithoutUsersInput, user_usage_dataUncheckedCreateWithoutUsersInput> | user_usage_dataCreateWithoutUsersInput[] | user_usage_dataUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_usage_dataCreateOrConnectWithoutUsersInput | user_usage_dataCreateOrConnectWithoutUsersInput[]
    createMany?: user_usage_dataCreateManyUsersInputEnvelope
    connect?: user_usage_dataWhereUniqueInput | user_usage_dataWhereUniqueInput[]
  }

  export type quizzesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<quizzesCreateWithoutUsersInput, quizzesUncheckedCreateWithoutUsersInput> | quizzesCreateWithoutUsersInput[] | quizzesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutUsersInput | quizzesCreateOrConnectWithoutUsersInput[]
    createMany?: quizzesCreateManyUsersInputEnvelope
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
  }

  export type user_usage_dataUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<user_usage_dataCreateWithoutUsersInput, user_usage_dataUncheckedCreateWithoutUsersInput> | user_usage_dataCreateWithoutUsersInput[] | user_usage_dataUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_usage_dataCreateOrConnectWithoutUsersInput | user_usage_dataCreateOrConnectWithoutUsersInput[]
    createMany?: user_usage_dataCreateManyUsersInputEnvelope
    connect?: user_usage_dataWhereUniqueInput | user_usage_dataWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type quizzesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<quizzesCreateWithoutUsersInput, quizzesUncheckedCreateWithoutUsersInput> | quizzesCreateWithoutUsersInput[] | quizzesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutUsersInput | quizzesCreateOrConnectWithoutUsersInput[]
    upsert?: quizzesUpsertWithWhereUniqueWithoutUsersInput | quizzesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: quizzesCreateManyUsersInputEnvelope
    set?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    disconnect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    delete?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    update?: quizzesUpdateWithWhereUniqueWithoutUsersInput | quizzesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: quizzesUpdateManyWithWhereWithoutUsersInput | quizzesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
  }

  export type user_usage_dataUpdateManyWithoutUsersNestedInput = {
    create?: XOR<user_usage_dataCreateWithoutUsersInput, user_usage_dataUncheckedCreateWithoutUsersInput> | user_usage_dataCreateWithoutUsersInput[] | user_usage_dataUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_usage_dataCreateOrConnectWithoutUsersInput | user_usage_dataCreateOrConnectWithoutUsersInput[]
    upsert?: user_usage_dataUpsertWithWhereUniqueWithoutUsersInput | user_usage_dataUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: user_usage_dataCreateManyUsersInputEnvelope
    set?: user_usage_dataWhereUniqueInput | user_usage_dataWhereUniqueInput[]
    disconnect?: user_usage_dataWhereUniqueInput | user_usage_dataWhereUniqueInput[]
    delete?: user_usage_dataWhereUniqueInput | user_usage_dataWhereUniqueInput[]
    connect?: user_usage_dataWhereUniqueInput | user_usage_dataWhereUniqueInput[]
    update?: user_usage_dataUpdateWithWhereUniqueWithoutUsersInput | user_usage_dataUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: user_usage_dataUpdateManyWithWhereWithoutUsersInput | user_usage_dataUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: user_usage_dataScalarWhereInput | user_usage_dataScalarWhereInput[]
  }

  export type quizzesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<quizzesCreateWithoutUsersInput, quizzesUncheckedCreateWithoutUsersInput> | quizzesCreateWithoutUsersInput[] | quizzesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutUsersInput | quizzesCreateOrConnectWithoutUsersInput[]
    upsert?: quizzesUpsertWithWhereUniqueWithoutUsersInput | quizzesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: quizzesCreateManyUsersInputEnvelope
    set?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    disconnect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    delete?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    update?: quizzesUpdateWithWhereUniqueWithoutUsersInput | quizzesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: quizzesUpdateManyWithWhereWithoutUsersInput | quizzesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
  }

  export type user_usage_dataUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<user_usage_dataCreateWithoutUsersInput, user_usage_dataUncheckedCreateWithoutUsersInput> | user_usage_dataCreateWithoutUsersInput[] | user_usage_dataUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_usage_dataCreateOrConnectWithoutUsersInput | user_usage_dataCreateOrConnectWithoutUsersInput[]
    upsert?: user_usage_dataUpsertWithWhereUniqueWithoutUsersInput | user_usage_dataUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: user_usage_dataCreateManyUsersInputEnvelope
    set?: user_usage_dataWhereUniqueInput | user_usage_dataWhereUniqueInput[]
    disconnect?: user_usage_dataWhereUniqueInput | user_usage_dataWhereUniqueInput[]
    delete?: user_usage_dataWhereUniqueInput | user_usage_dataWhereUniqueInput[]
    connect?: user_usage_dataWhereUniqueInput | user_usage_dataWhereUniqueInput[]
    update?: user_usage_dataUpdateWithWhereUniqueWithoutUsersInput | user_usage_dataUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: user_usage_dataUpdateManyWithWhereWithoutUsersInput | user_usage_dataUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: user_usage_dataScalarWhereInput | user_usage_dataScalarWhereInput[]
  }

  export type questionsCreateNestedOneWithoutUser_responsesInput = {
    create?: XOR<questionsCreateWithoutUser_responsesInput, questionsUncheckedCreateWithoutUser_responsesInput>
    connectOrCreate?: questionsCreateOrConnectWithoutUser_responsesInput
    connect?: questionsWhereUniqueInput
  }

  export type quizzesCreateNestedOneWithoutUser_responsesInput = {
    create?: XOR<quizzesCreateWithoutUser_responsesInput, quizzesUncheckedCreateWithoutUser_responsesInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutUser_responsesInput
    connect?: quizzesWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type questionsUpdateOneRequiredWithoutUser_responsesNestedInput = {
    create?: XOR<questionsCreateWithoutUser_responsesInput, questionsUncheckedCreateWithoutUser_responsesInput>
    connectOrCreate?: questionsCreateOrConnectWithoutUser_responsesInput
    upsert?: questionsUpsertWithoutUser_responsesInput
    connect?: questionsWhereUniqueInput
    update?: XOR<XOR<questionsUpdateToOneWithWhereWithoutUser_responsesInput, questionsUpdateWithoutUser_responsesInput>, questionsUncheckedUpdateWithoutUser_responsesInput>
  }

  export type quizzesUpdateOneRequiredWithoutUser_responsesNestedInput = {
    create?: XOR<quizzesCreateWithoutUser_responsesInput, quizzesUncheckedCreateWithoutUser_responsesInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutUser_responsesInput
    upsert?: quizzesUpsertWithoutUser_responsesInput
    connect?: quizzesWhereUniqueInput
    update?: XOR<XOR<quizzesUpdateToOneWithWhereWithoutUser_responsesInput, quizzesUpdateWithoutUser_responsesInput>, quizzesUncheckedUpdateWithoutUser_responsesInput>
  }

  export type usersCreateNestedOneWithoutUser_usage_dataInput = {
    create?: XOR<usersCreateWithoutUser_usage_dataInput, usersUncheckedCreateWithoutUser_usage_dataInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_usage_dataInput
    connect?: usersWhereUniqueInput
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersUpdateOneRequiredWithoutUser_usage_dataNestedInput = {
    create?: XOR<usersCreateWithoutUser_usage_dataInput, usersUncheckedCreateWithoutUser_usage_dataInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_usage_dataInput
    upsert?: usersUpsertWithoutUser_usage_dataInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutUser_usage_dataInput, usersUpdateWithoutUser_usage_dataInput>, usersUncheckedUpdateWithoutUser_usage_dataInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type quizzesCreateWithoutQuestionsInput = {
    id?: string
    quiz_title: string
    created_at?: Date | string
    total_time_taken?: number | null
    correct_answers_count?: number
    users: usersCreateNestedOneWithoutQuizzesInput
    user_responses?: user_responsesCreateNestedManyWithoutQuizzesInput
  }

  export type quizzesUncheckedCreateWithoutQuestionsInput = {
    id?: string
    user_id: string
    quiz_title: string
    created_at?: Date | string
    total_time_taken?: number | null
    correct_answers_count?: number
    user_responses?: user_responsesUncheckedCreateNestedManyWithoutQuizzesInput
  }

  export type quizzesCreateOrConnectWithoutQuestionsInput = {
    where: quizzesWhereUniqueInput
    create: XOR<quizzesCreateWithoutQuestionsInput, quizzesUncheckedCreateWithoutQuestionsInput>
  }

  export type user_responsesCreateWithoutQuestionsInput = {
    id?: string
    user_answer: string
    is_correct: boolean
    created_at?: Date | string
    quizzes: quizzesCreateNestedOneWithoutUser_responsesInput
  }

  export type user_responsesUncheckedCreateWithoutQuestionsInput = {
    id?: string
    quiz_id: string
    user_answer: string
    is_correct: boolean
    created_at?: Date | string
  }

  export type user_responsesCreateOrConnectWithoutQuestionsInput = {
    where: user_responsesWhereUniqueInput
    create: XOR<user_responsesCreateWithoutQuestionsInput, user_responsesUncheckedCreateWithoutQuestionsInput>
  }

  export type user_responsesCreateManyQuestionsInputEnvelope = {
    data: user_responsesCreateManyQuestionsInput | user_responsesCreateManyQuestionsInput[]
    skipDuplicates?: boolean
  }

  export type quizzesUpsertWithoutQuestionsInput = {
    update: XOR<quizzesUpdateWithoutQuestionsInput, quizzesUncheckedUpdateWithoutQuestionsInput>
    create: XOR<quizzesCreateWithoutQuestionsInput, quizzesUncheckedCreateWithoutQuestionsInput>
    where?: quizzesWhereInput
  }

  export type quizzesUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: quizzesWhereInput
    data: XOR<quizzesUpdateWithoutQuestionsInput, quizzesUncheckedUpdateWithoutQuestionsInput>
  }

  export type quizzesUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    quiz_title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    total_time_taken?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: IntFieldUpdateOperationsInput | number
    users?: usersUpdateOneRequiredWithoutQuizzesNestedInput
    user_responses?: user_responsesUpdateManyWithoutQuizzesNestedInput
  }

  export type quizzesUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    quiz_title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    total_time_taken?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: IntFieldUpdateOperationsInput | number
    user_responses?: user_responsesUncheckedUpdateManyWithoutQuizzesNestedInput
  }

  export type user_responsesUpsertWithWhereUniqueWithoutQuestionsInput = {
    where: user_responsesWhereUniqueInput
    update: XOR<user_responsesUpdateWithoutQuestionsInput, user_responsesUncheckedUpdateWithoutQuestionsInput>
    create: XOR<user_responsesCreateWithoutQuestionsInput, user_responsesUncheckedCreateWithoutQuestionsInput>
  }

  export type user_responsesUpdateWithWhereUniqueWithoutQuestionsInput = {
    where: user_responsesWhereUniqueInput
    data: XOR<user_responsesUpdateWithoutQuestionsInput, user_responsesUncheckedUpdateWithoutQuestionsInput>
  }

  export type user_responsesUpdateManyWithWhereWithoutQuestionsInput = {
    where: user_responsesScalarWhereInput
    data: XOR<user_responsesUpdateManyMutationInput, user_responsesUncheckedUpdateManyWithoutQuestionsInput>
  }

  export type user_responsesScalarWhereInput = {
    AND?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
    OR?: user_responsesScalarWhereInput[]
    NOT?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
    id?: UuidFilter<"user_responses"> | string
    question_id?: UuidFilter<"user_responses"> | string
    quiz_id?: UuidFilter<"user_responses"> | string
    user_answer?: StringFilter<"user_responses"> | string
    is_correct?: BoolFilter<"user_responses"> | boolean
    created_at?: DateTimeFilter<"user_responses"> | Date | string
  }

  export type questionsCreateWithoutQuizzesInput = {
    id?: string
    text: string
    options?: questionsCreateoptionsInput | string[]
    correct_answer: string
    created_at?: Date | string
    user_responses?: user_responsesCreateNestedManyWithoutQuestionsInput
  }

  export type questionsUncheckedCreateWithoutQuizzesInput = {
    id?: string
    text: string
    options?: questionsCreateoptionsInput | string[]
    correct_answer: string
    created_at?: Date | string
    user_responses?: user_responsesUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type questionsCreateOrConnectWithoutQuizzesInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutQuizzesInput, questionsUncheckedCreateWithoutQuizzesInput>
  }

  export type questionsCreateManyQuizzesInputEnvelope = {
    data: questionsCreateManyQuizzesInput | questionsCreateManyQuizzesInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutQuizzesInput = {
    id?: string
    email: string
    created_at?: Date | string
    password?: string | null
    user_usage_data?: user_usage_dataCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutQuizzesInput = {
    id?: string
    email: string
    created_at?: Date | string
    password?: string | null
    user_usage_data?: user_usage_dataUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutQuizzesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutQuizzesInput, usersUncheckedCreateWithoutQuizzesInput>
  }

  export type user_responsesCreateWithoutQuizzesInput = {
    id?: string
    user_answer: string
    is_correct: boolean
    created_at?: Date | string
    questions: questionsCreateNestedOneWithoutUser_responsesInput
  }

  export type user_responsesUncheckedCreateWithoutQuizzesInput = {
    id?: string
    question_id: string
    user_answer: string
    is_correct: boolean
    created_at?: Date | string
  }

  export type user_responsesCreateOrConnectWithoutQuizzesInput = {
    where: user_responsesWhereUniqueInput
    create: XOR<user_responsesCreateWithoutQuizzesInput, user_responsesUncheckedCreateWithoutQuizzesInput>
  }

  export type user_responsesCreateManyQuizzesInputEnvelope = {
    data: user_responsesCreateManyQuizzesInput | user_responsesCreateManyQuizzesInput[]
    skipDuplicates?: boolean
  }

  export type questionsUpsertWithWhereUniqueWithoutQuizzesInput = {
    where: questionsWhereUniqueInput
    update: XOR<questionsUpdateWithoutQuizzesInput, questionsUncheckedUpdateWithoutQuizzesInput>
    create: XOR<questionsCreateWithoutQuizzesInput, questionsUncheckedCreateWithoutQuizzesInput>
  }

  export type questionsUpdateWithWhereUniqueWithoutQuizzesInput = {
    where: questionsWhereUniqueInput
    data: XOR<questionsUpdateWithoutQuizzesInput, questionsUncheckedUpdateWithoutQuizzesInput>
  }

  export type questionsUpdateManyWithWhereWithoutQuizzesInput = {
    where: questionsScalarWhereInput
    data: XOR<questionsUpdateManyMutationInput, questionsUncheckedUpdateManyWithoutQuizzesInput>
  }

  export type questionsScalarWhereInput = {
    AND?: questionsScalarWhereInput | questionsScalarWhereInput[]
    OR?: questionsScalarWhereInput[]
    NOT?: questionsScalarWhereInput | questionsScalarWhereInput[]
    id?: UuidFilter<"questions"> | string
    quiz_id?: UuidFilter<"questions"> | string
    text?: StringFilter<"questions"> | string
    options?: StringNullableListFilter<"questions">
    correct_answer?: StringFilter<"questions"> | string
    created_at?: DateTimeFilter<"questions"> | Date | string
  }

  export type usersUpsertWithoutQuizzesInput = {
    update: XOR<usersUpdateWithoutQuizzesInput, usersUncheckedUpdateWithoutQuizzesInput>
    create: XOR<usersCreateWithoutQuizzesInput, usersUncheckedCreateWithoutQuizzesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutQuizzesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutQuizzesInput, usersUncheckedUpdateWithoutQuizzesInput>
  }

  export type usersUpdateWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    user_usage_data?: user_usage_dataUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    user_usage_data?: user_usage_dataUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type user_responsesUpsertWithWhereUniqueWithoutQuizzesInput = {
    where: user_responsesWhereUniqueInput
    update: XOR<user_responsesUpdateWithoutQuizzesInput, user_responsesUncheckedUpdateWithoutQuizzesInput>
    create: XOR<user_responsesCreateWithoutQuizzesInput, user_responsesUncheckedCreateWithoutQuizzesInput>
  }

  export type user_responsesUpdateWithWhereUniqueWithoutQuizzesInput = {
    where: user_responsesWhereUniqueInput
    data: XOR<user_responsesUpdateWithoutQuizzesInput, user_responsesUncheckedUpdateWithoutQuizzesInput>
  }

  export type user_responsesUpdateManyWithWhereWithoutQuizzesInput = {
    where: user_responsesScalarWhereInput
    data: XOR<user_responsesUpdateManyMutationInput, user_responsesUncheckedUpdateManyWithoutQuizzesInput>
  }

  export type quizzesCreateWithoutUsersInput = {
    id?: string
    quiz_title: string
    created_at?: Date | string
    total_time_taken?: number | null
    correct_answers_count?: number
    questions?: questionsCreateNestedManyWithoutQuizzesInput
    user_responses?: user_responsesCreateNestedManyWithoutQuizzesInput
  }

  export type quizzesUncheckedCreateWithoutUsersInput = {
    id?: string
    quiz_title: string
    created_at?: Date | string
    total_time_taken?: number | null
    correct_answers_count?: number
    questions?: questionsUncheckedCreateNestedManyWithoutQuizzesInput
    user_responses?: user_responsesUncheckedCreateNestedManyWithoutQuizzesInput
  }

  export type quizzesCreateOrConnectWithoutUsersInput = {
    where: quizzesWhereUniqueInput
    create: XOR<quizzesCreateWithoutUsersInput, quizzesUncheckedCreateWithoutUsersInput>
  }

  export type quizzesCreateManyUsersInputEnvelope = {
    data: quizzesCreateManyUsersInput | quizzesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type user_usage_dataCreateWithoutUsersInput = {
    id?: string
    prompt_tokens: number
    completion_tokens: number
    total_tokens: number
    created_at?: Date | string
    system_fingerprint?: string | null
    quiz_seed?: bigint | number | null
    used_model?: string | null
    count_Questions?: number | null
    response_time_taken?: number | null
  }

  export type user_usage_dataUncheckedCreateWithoutUsersInput = {
    id?: string
    prompt_tokens: number
    completion_tokens: number
    total_tokens: number
    created_at?: Date | string
    system_fingerprint?: string | null
    quiz_seed?: bigint | number | null
    used_model?: string | null
    count_Questions?: number | null
    response_time_taken?: number | null
  }

  export type user_usage_dataCreateOrConnectWithoutUsersInput = {
    where: user_usage_dataWhereUniqueInput
    create: XOR<user_usage_dataCreateWithoutUsersInput, user_usage_dataUncheckedCreateWithoutUsersInput>
  }

  export type user_usage_dataCreateManyUsersInputEnvelope = {
    data: user_usage_dataCreateManyUsersInput | user_usage_dataCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type quizzesUpsertWithWhereUniqueWithoutUsersInput = {
    where: quizzesWhereUniqueInput
    update: XOR<quizzesUpdateWithoutUsersInput, quizzesUncheckedUpdateWithoutUsersInput>
    create: XOR<quizzesCreateWithoutUsersInput, quizzesUncheckedCreateWithoutUsersInput>
  }

  export type quizzesUpdateWithWhereUniqueWithoutUsersInput = {
    where: quizzesWhereUniqueInput
    data: XOR<quizzesUpdateWithoutUsersInput, quizzesUncheckedUpdateWithoutUsersInput>
  }

  export type quizzesUpdateManyWithWhereWithoutUsersInput = {
    where: quizzesScalarWhereInput
    data: XOR<quizzesUpdateManyMutationInput, quizzesUncheckedUpdateManyWithoutUsersInput>
  }

  export type quizzesScalarWhereInput = {
    AND?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
    OR?: quizzesScalarWhereInput[]
    NOT?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
    id?: UuidFilter<"quizzes"> | string
    user_id?: UuidFilter<"quizzes"> | string
    quiz_title?: StringFilter<"quizzes"> | string
    created_at?: DateTimeFilter<"quizzes"> | Date | string
    total_time_taken?: IntNullableFilter<"quizzes"> | number | null
    correct_answers_count?: IntFilter<"quizzes"> | number
  }

  export type user_usage_dataUpsertWithWhereUniqueWithoutUsersInput = {
    where: user_usage_dataWhereUniqueInput
    update: XOR<user_usage_dataUpdateWithoutUsersInput, user_usage_dataUncheckedUpdateWithoutUsersInput>
    create: XOR<user_usage_dataCreateWithoutUsersInput, user_usage_dataUncheckedCreateWithoutUsersInput>
  }

  export type user_usage_dataUpdateWithWhereUniqueWithoutUsersInput = {
    where: user_usage_dataWhereUniqueInput
    data: XOR<user_usage_dataUpdateWithoutUsersInput, user_usage_dataUncheckedUpdateWithoutUsersInput>
  }

  export type user_usage_dataUpdateManyWithWhereWithoutUsersInput = {
    where: user_usage_dataScalarWhereInput
    data: XOR<user_usage_dataUpdateManyMutationInput, user_usage_dataUncheckedUpdateManyWithoutUsersInput>
  }

  export type user_usage_dataScalarWhereInput = {
    AND?: user_usage_dataScalarWhereInput | user_usage_dataScalarWhereInput[]
    OR?: user_usage_dataScalarWhereInput[]
    NOT?: user_usage_dataScalarWhereInput | user_usage_dataScalarWhereInput[]
    id?: UuidFilter<"user_usage_data"> | string
    user_id?: UuidFilter<"user_usage_data"> | string
    prompt_tokens?: IntFilter<"user_usage_data"> | number
    completion_tokens?: IntFilter<"user_usage_data"> | number
    total_tokens?: IntFilter<"user_usage_data"> | number
    created_at?: DateTimeFilter<"user_usage_data"> | Date | string
    system_fingerprint?: StringNullableFilter<"user_usage_data"> | string | null
    quiz_seed?: BigIntNullableFilter<"user_usage_data"> | bigint | number | null
    used_model?: StringNullableFilter<"user_usage_data"> | string | null
    count_Questions?: IntNullableFilter<"user_usage_data"> | number | null
    response_time_taken?: FloatNullableFilter<"user_usage_data"> | number | null
  }

  export type questionsCreateWithoutUser_responsesInput = {
    id?: string
    text: string
    options?: questionsCreateoptionsInput | string[]
    correct_answer: string
    created_at?: Date | string
    quizzes: quizzesCreateNestedOneWithoutQuestionsInput
  }

  export type questionsUncheckedCreateWithoutUser_responsesInput = {
    id?: string
    quiz_id: string
    text: string
    options?: questionsCreateoptionsInput | string[]
    correct_answer: string
    created_at?: Date | string
  }

  export type questionsCreateOrConnectWithoutUser_responsesInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutUser_responsesInput, questionsUncheckedCreateWithoutUser_responsesInput>
  }

  export type quizzesCreateWithoutUser_responsesInput = {
    id?: string
    quiz_title: string
    created_at?: Date | string
    total_time_taken?: number | null
    correct_answers_count?: number
    questions?: questionsCreateNestedManyWithoutQuizzesInput
    users: usersCreateNestedOneWithoutQuizzesInput
  }

  export type quizzesUncheckedCreateWithoutUser_responsesInput = {
    id?: string
    user_id: string
    quiz_title: string
    created_at?: Date | string
    total_time_taken?: number | null
    correct_answers_count?: number
    questions?: questionsUncheckedCreateNestedManyWithoutQuizzesInput
  }

  export type quizzesCreateOrConnectWithoutUser_responsesInput = {
    where: quizzesWhereUniqueInput
    create: XOR<quizzesCreateWithoutUser_responsesInput, quizzesUncheckedCreateWithoutUser_responsesInput>
  }

  export type questionsUpsertWithoutUser_responsesInput = {
    update: XOR<questionsUpdateWithoutUser_responsesInput, questionsUncheckedUpdateWithoutUser_responsesInput>
    create: XOR<questionsCreateWithoutUser_responsesInput, questionsUncheckedCreateWithoutUser_responsesInput>
    where?: questionsWhereInput
  }

  export type questionsUpdateToOneWithWhereWithoutUser_responsesInput = {
    where?: questionsWhereInput
    data: XOR<questionsUpdateWithoutUser_responsesInput, questionsUncheckedUpdateWithoutUser_responsesInput>
  }

  export type questionsUpdateWithoutUser_responsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: questionsUpdateoptionsInput | string[]
    correct_answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    quizzes?: quizzesUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateWithoutUser_responsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    quiz_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: questionsUpdateoptionsInput | string[]
    correct_answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type quizzesUpsertWithoutUser_responsesInput = {
    update: XOR<quizzesUpdateWithoutUser_responsesInput, quizzesUncheckedUpdateWithoutUser_responsesInput>
    create: XOR<quizzesCreateWithoutUser_responsesInput, quizzesUncheckedCreateWithoutUser_responsesInput>
    where?: quizzesWhereInput
  }

  export type quizzesUpdateToOneWithWhereWithoutUser_responsesInput = {
    where?: quizzesWhereInput
    data: XOR<quizzesUpdateWithoutUser_responsesInput, quizzesUncheckedUpdateWithoutUser_responsesInput>
  }

  export type quizzesUpdateWithoutUser_responsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    quiz_title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    total_time_taken?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: IntFieldUpdateOperationsInput | number
    questions?: questionsUpdateManyWithoutQuizzesNestedInput
    users?: usersUpdateOneRequiredWithoutQuizzesNestedInput
  }

  export type quizzesUncheckedUpdateWithoutUser_responsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    quiz_title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    total_time_taken?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: IntFieldUpdateOperationsInput | number
    questions?: questionsUncheckedUpdateManyWithoutQuizzesNestedInput
  }

  export type usersCreateWithoutUser_usage_dataInput = {
    id?: string
    email: string
    created_at?: Date | string
    password?: string | null
    quizzes?: quizzesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutUser_usage_dataInput = {
    id?: string
    email: string
    created_at?: Date | string
    password?: string | null
    quizzes?: quizzesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutUser_usage_dataInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUser_usage_dataInput, usersUncheckedCreateWithoutUser_usage_dataInput>
  }

  export type usersUpsertWithoutUser_usage_dataInput = {
    update: XOR<usersUpdateWithoutUser_usage_dataInput, usersUncheckedUpdateWithoutUser_usage_dataInput>
    create: XOR<usersCreateWithoutUser_usage_dataInput, usersUncheckedCreateWithoutUser_usage_dataInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutUser_usage_dataInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutUser_usage_dataInput, usersUncheckedUpdateWithoutUser_usage_dataInput>
  }

  export type usersUpdateWithoutUser_usage_dataInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    quizzes?: quizzesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutUser_usage_dataInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    quizzes?: quizzesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type user_responsesCreateManyQuestionsInput = {
    id?: string
    quiz_id: string
    user_answer: string
    is_correct: boolean
    created_at?: Date | string
  }

  export type user_responsesUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_answer?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    quizzes?: quizzesUpdateOneRequiredWithoutUser_responsesNestedInput
  }

  export type user_responsesUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    quiz_id?: StringFieldUpdateOperationsInput | string
    user_answer?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_responsesUncheckedUpdateManyWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    quiz_id?: StringFieldUpdateOperationsInput | string
    user_answer?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type questionsCreateManyQuizzesInput = {
    id?: string
    text: string
    options?: questionsCreateoptionsInput | string[]
    correct_answer: string
    created_at?: Date | string
  }

  export type user_responsesCreateManyQuizzesInput = {
    id?: string
    question_id: string
    user_answer: string
    is_correct: boolean
    created_at?: Date | string
  }

  export type questionsUpdateWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: questionsUpdateoptionsInput | string[]
    correct_answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_responses?: user_responsesUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: questionsUpdateoptionsInput | string[]
    correct_answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_responses?: user_responsesUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateManyWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: questionsUpdateoptionsInput | string[]
    correct_answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_responsesUpdateWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_answer?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: questionsUpdateOneRequiredWithoutUser_responsesNestedInput
  }

  export type user_responsesUncheckedUpdateWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    user_answer?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_responsesUncheckedUpdateManyWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    user_answer?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type quizzesCreateManyUsersInput = {
    id?: string
    quiz_title: string
    created_at?: Date | string
    total_time_taken?: number | null
    correct_answers_count?: number
  }

  export type user_usage_dataCreateManyUsersInput = {
    id?: string
    prompt_tokens: number
    completion_tokens: number
    total_tokens: number
    created_at?: Date | string
    system_fingerprint?: string | null
    quiz_seed?: bigint | number | null
    used_model?: string | null
    count_Questions?: number | null
    response_time_taken?: number | null
  }

  export type quizzesUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    quiz_title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    total_time_taken?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: IntFieldUpdateOperationsInput | number
    questions?: questionsUpdateManyWithoutQuizzesNestedInput
    user_responses?: user_responsesUpdateManyWithoutQuizzesNestedInput
  }

  export type quizzesUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    quiz_title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    total_time_taken?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: IntFieldUpdateOperationsInput | number
    questions?: questionsUncheckedUpdateManyWithoutQuizzesNestedInput
    user_responses?: user_responsesUncheckedUpdateManyWithoutQuizzesNestedInput
  }

  export type quizzesUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    quiz_title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    total_time_taken?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: IntFieldUpdateOperationsInput | number
  }

  export type user_usage_dataUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt_tokens?: IntFieldUpdateOperationsInput | number
    completion_tokens?: IntFieldUpdateOperationsInput | number
    total_tokens?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    system_fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    quiz_seed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    used_model?: NullableStringFieldUpdateOperationsInput | string | null
    count_Questions?: NullableIntFieldUpdateOperationsInput | number | null
    response_time_taken?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type user_usage_dataUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt_tokens?: IntFieldUpdateOperationsInput | number
    completion_tokens?: IntFieldUpdateOperationsInput | number
    total_tokens?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    system_fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    quiz_seed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    used_model?: NullableStringFieldUpdateOperationsInput | string | null
    count_Questions?: NullableIntFieldUpdateOperationsInput | number | null
    response_time_taken?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type user_usage_dataUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt_tokens?: IntFieldUpdateOperationsInput | number
    completion_tokens?: IntFieldUpdateOperationsInput | number
    total_tokens?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    system_fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    quiz_seed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    used_model?: NullableStringFieldUpdateOperationsInput | string | null
    count_Questions?: NullableIntFieldUpdateOperationsInput | number | null
    response_time_taken?: NullableFloatFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use QuestionsCountOutputTypeDefaultArgs instead
     */
    export type QuestionsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuizzesCountOutputTypeDefaultArgs instead
     */
    export type QuizzesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuizzesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use questionsDefaultArgs instead
     */
    export type questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = questionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use quizzesDefaultArgs instead
     */
    export type quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = quizzesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_responsesDefaultArgs instead
     */
    export type user_responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_responsesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_usage_dataDefaultArgs instead
     */
    export type user_usage_dataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_usage_dataDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}