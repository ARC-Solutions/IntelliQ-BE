
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model quiz
 * 
 */
export type quiz = $Result.DefaultSelection<Prisma.$quizPayload>
/**
 * Model question
 * 
 */
export type question = $Result.DefaultSelection<Prisma.$questionPayload>
/**
 * Model quizHistory
 * 
 */
export type quizHistory = $Result.DefaultSelection<Prisma.$quizHistoryPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.quiz`: Exposes CRUD operations for the **quiz** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quizzes
    * const quizzes = await prisma.quiz.findMany()
    * ```
    */
  get quiz(): Prisma.quizDelegate<ExtArgs>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.questionDelegate<ExtArgs>;

  /**
   * `prisma.quizHistory`: Exposes CRUD operations for the **quizHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuizHistories
    * const quizHistories = await prisma.quizHistory.findMany()
    * ```
    */
  get quizHistory(): Prisma.quizHistoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    quiz: 'quiz',
    question: 'question',
    quizHistory: 'quizHistory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'quiz' | 'question' | 'quizHistory'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      quiz: {
        payload: Prisma.$quizPayload<ExtArgs>
        fields: Prisma.quizFieldRefs
        operations: {
          findUnique: {
            args: Prisma.quizFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.quizFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizPayload>
          }
          findFirst: {
            args: Prisma.quizFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.quizFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizPayload>
          }
          findMany: {
            args: Prisma.quizFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizPayload>[]
          }
          create: {
            args: Prisma.quizCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizPayload>
          }
          createMany: {
            args: Prisma.quizCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.quizDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizPayload>
          }
          update: {
            args: Prisma.quizUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizPayload>
          }
          deleteMany: {
            args: Prisma.quizDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.quizUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.quizUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizPayload>
          }
          aggregate: {
            args: Prisma.QuizAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuiz>
          }
          groupBy: {
            args: Prisma.quizGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuizGroupByOutputType>[]
          }
          count: {
            args: Prisma.quizCountArgs<ExtArgs>,
            result: $Utils.Optional<QuizCountAggregateOutputType> | number
          }
        }
      }
      question: {
        payload: Prisma.$questionPayload<ExtArgs>
        fields: Prisma.questionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.questionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.questionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          findFirst: {
            args: Prisma.questionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.questionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          findMany: {
            args: Prisma.questionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>[]
          }
          create: {
            args: Prisma.questionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          createMany: {
            args: Prisma.questionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.questionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          update: {
            args: Prisma.questionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          deleteMany: {
            args: Prisma.questionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.questionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.questionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.questionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.questionCountArgs<ExtArgs>,
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      quizHistory: {
        payload: Prisma.$quizHistoryPayload<ExtArgs>
        fields: Prisma.quizHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.quizHistoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.quizHistoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizHistoryPayload>
          }
          findFirst: {
            args: Prisma.quizHistoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.quizHistoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizHistoryPayload>
          }
          findMany: {
            args: Prisma.quizHistoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizHistoryPayload>[]
          }
          create: {
            args: Prisma.quizHistoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizHistoryPayload>
          }
          createMany: {
            args: Prisma.quizHistoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.quizHistoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizHistoryPayload>
          }
          update: {
            args: Prisma.quizHistoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizHistoryPayload>
          }
          deleteMany: {
            args: Prisma.quizHistoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.quizHistoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.quizHistoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$quizHistoryPayload>
          }
          aggregate: {
            args: Prisma.QuizHistoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuizHistory>
          }
          groupBy: {
            args: Prisma.quizHistoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuizHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.quizHistoryCountArgs<ExtArgs>,
            result: $Utils.Optional<QuizHistoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    quizzes: number
    quizHistories: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizzes?: boolean | UserCountOutputTypeCountQuizzesArgs
    quizHistories?: boolean | UserCountOutputTypeCountQuizHistoriesArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quizWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuizHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quizHistoryWhereInput
  }



  /**
   * Count Type QuizCountOutputType
   */

  export type QuizCountOutputType = {
    questions: number
    histories: number
  }

  export type QuizCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | QuizCountOutputTypeCountQuestionsArgs
    histories?: boolean | QuizCountOutputTypeCountHistoriesArgs
  }

  // Custom InputTypes

  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizCountOutputType
     */
    select?: QuizCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionWhereInput
  }


  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeCountHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quizHistoryWhereInput
  }



  /**
   * Models
   */

  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    oauth_id: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    oauth_id: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    oauth_id: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    oauth_id?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    oauth_id?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    oauth_id?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string | null
    oauth_id: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    oauth_id?: boolean
    quizzes?: boolean | user$quizzesArgs<ExtArgs>
    quizHistories?: boolean | user$quizHistoriesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    oauth_id?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizzes?: boolean | user$quizzesArgs<ExtArgs>
    quizHistories?: boolean | user$quizHistoriesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      quizzes: Prisma.$quizPayload<ExtArgs>[]
      quizHistories: Prisma.$quizHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string | null
      oauth_id: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userCreateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userDeleteArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userUpsertArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    quizzes<T extends user$quizzesArgs<ExtArgs> = {}>(args?: Subset<T, user$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizPayload<ExtArgs>, T, 'findMany'> | Null>;

    quizHistories<T extends user$quizHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, user$quizHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizHistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly oauth_id: FieldRef<"user", 'String'>
  }
    

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user.quizzes
   */
  export type user$quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    where?: quizWhereInput
    orderBy?: quizOrderByWithRelationInput | quizOrderByWithRelationInput[]
    cursor?: quizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }


  /**
   * user.quizHistories
   */
  export type user$quizHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizHistory
     */
    select?: quizHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizHistoryInclude<ExtArgs> | null
    where?: quizHistoryWhereInput
    orderBy?: quizHistoryOrderByWithRelationInput | quizHistoryOrderByWithRelationInput[]
    cursor?: quizHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizHistoryScalarFieldEnum | QuizHistoryScalarFieldEnum[]
  }


  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
  }



  /**
   * Model quiz
   */

  export type AggregateQuiz = {
    _count: QuizCountAggregateOutputType | null
    _avg: QuizAvgAggregateOutputType | null
    _sum: QuizSumAggregateOutputType | null
    _min: QuizMinAggregateOutputType | null
    _max: QuizMaxAggregateOutputType | null
  }

  export type QuizAvgAggregateOutputType = {
    id: number | null
  }

  export type QuizSumAggregateOutputType = {
    id: number | null
  }

  export type QuizMinAggregateOutputType = {
    id: number | null
    createdById: string | null
    topic: string | null
    createdAt: Date | null
  }

  export type QuizMaxAggregateOutputType = {
    id: number | null
    createdById: string | null
    topic: string | null
    createdAt: Date | null
  }

  export type QuizCountAggregateOutputType = {
    id: number
    createdById: number
    topic: number
    createdAt: number
    _all: number
  }


  export type QuizAvgAggregateInputType = {
    id?: true
  }

  export type QuizSumAggregateInputType = {
    id?: true
  }

  export type QuizMinAggregateInputType = {
    id?: true
    createdById?: true
    topic?: true
    createdAt?: true
  }

  export type QuizMaxAggregateInputType = {
    id?: true
    createdById?: true
    topic?: true
    createdAt?: true
  }

  export type QuizCountAggregateInputType = {
    id?: true
    createdById?: true
    topic?: true
    createdAt?: true
    _all?: true
  }

  export type QuizAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which quiz to aggregate.
     */
    where?: quizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizOrderByWithRelationInput | quizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: quizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned quizzes
    **/
    _count?: true | QuizCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuizAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuizSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizMaxAggregateInputType
  }

  export type GetQuizAggregateType<T extends QuizAggregateArgs> = {
        [P in keyof T & keyof AggregateQuiz]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuiz[P]>
      : GetScalarType<T[P], AggregateQuiz[P]>
  }




  export type quizGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quizWhereInput
    orderBy?: quizOrderByWithAggregationInput | quizOrderByWithAggregationInput[]
    by: QuizScalarFieldEnum[] | QuizScalarFieldEnum
    having?: quizScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizCountAggregateInputType | true
    _avg?: QuizAvgAggregateInputType
    _sum?: QuizSumAggregateInputType
    _min?: QuizMinAggregateInputType
    _max?: QuizMaxAggregateInputType
  }

  export type QuizGroupByOutputType = {
    id: number
    createdById: string
    topic: string
    createdAt: Date
    _count: QuizCountAggregateOutputType | null
    _avg: QuizAvgAggregateOutputType | null
    _sum: QuizSumAggregateOutputType | null
    _min: QuizMinAggregateOutputType | null
    _max: QuizMaxAggregateOutputType | null
  }

  type GetQuizGroupByPayload<T extends quizGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuizGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizGroupByOutputType[P]>
            : GetScalarType<T[P], QuizGroupByOutputType[P]>
        }
      >
    >


  export type quizSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdById?: boolean
    topic?: boolean
    createdAt?: boolean
    createdBy?: boolean | userDefaultArgs<ExtArgs>
    questions?: boolean | quiz$questionsArgs<ExtArgs>
    histories?: boolean | quiz$historiesArgs<ExtArgs>
    _count?: boolean | QuizCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quiz"]>

  export type quizSelectScalar = {
    id?: boolean
    createdById?: boolean
    topic?: boolean
    createdAt?: boolean
  }

  export type quizInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | userDefaultArgs<ExtArgs>
    questions?: boolean | quiz$questionsArgs<ExtArgs>
    histories?: boolean | quiz$historiesArgs<ExtArgs>
    _count?: boolean | QuizCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $quizPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "quiz"
    objects: {
      createdBy: Prisma.$userPayload<ExtArgs>
      questions: Prisma.$questionPayload<ExtArgs>[]
      histories: Prisma.$quizHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdById: string
      topic: string
      createdAt: Date
    }, ExtArgs["result"]["quiz"]>
    composites: {}
  }


  type quizGetPayload<S extends boolean | null | undefined | quizDefaultArgs> = $Result.GetResult<Prisma.$quizPayload, S>

  type quizCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<quizFindManyArgs, 'select' | 'include'> & {
      select?: QuizCountAggregateInputType | true
    }

  export interface quizDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['quiz'], meta: { name: 'quiz' } }
    /**
     * Find zero or one Quiz that matches the filter.
     * @param {quizFindUniqueArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends quizFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, quizFindUniqueArgs<ExtArgs>>
    ): Prisma__quizClient<$Result.GetResult<Prisma.$quizPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Quiz that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {quizFindUniqueOrThrowArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends quizFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, quizFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__quizClient<$Result.GetResult<Prisma.$quizPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Quiz that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizFindFirstArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends quizFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, quizFindFirstArgs<ExtArgs>>
    ): Prisma__quizClient<$Result.GetResult<Prisma.$quizPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Quiz that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizFindFirstOrThrowArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends quizFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, quizFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__quizClient<$Result.GetResult<Prisma.$quizPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quizzes
     * const quizzes = await prisma.quiz.findMany()
     * 
     * // Get first 10 Quizzes
     * const quizzes = await prisma.quiz.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quizWithIdOnly = await prisma.quiz.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends quizFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quizFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Quiz.
     * @param {quizCreateArgs} args - Arguments to create a Quiz.
     * @example
     * // Create one Quiz
     * const Quiz = await prisma.quiz.create({
     *   data: {
     *     // ... data to create a Quiz
     *   }
     * })
     * 
    **/
    create<T extends quizCreateArgs<ExtArgs>>(
      args: SelectSubset<T, quizCreateArgs<ExtArgs>>
    ): Prisma__quizClient<$Result.GetResult<Prisma.$quizPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Quizzes.
     *     @param {quizCreateManyArgs} args - Arguments to create many Quizzes.
     *     @example
     *     // Create many Quizzes
     *     const quiz = await prisma.quiz.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends quizCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quizCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Quiz.
     * @param {quizDeleteArgs} args - Arguments to delete one Quiz.
     * @example
     * // Delete one Quiz
     * const Quiz = await prisma.quiz.delete({
     *   where: {
     *     // ... filter to delete one Quiz
     *   }
     * })
     * 
    **/
    delete<T extends quizDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, quizDeleteArgs<ExtArgs>>
    ): Prisma__quizClient<$Result.GetResult<Prisma.$quizPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Quiz.
     * @param {quizUpdateArgs} args - Arguments to update one Quiz.
     * @example
     * // Update one Quiz
     * const quiz = await prisma.quiz.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends quizUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, quizUpdateArgs<ExtArgs>>
    ): Prisma__quizClient<$Result.GetResult<Prisma.$quizPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Quizzes.
     * @param {quizDeleteManyArgs} args - Arguments to filter Quizzes to delete.
     * @example
     * // Delete a few Quizzes
     * const { count } = await prisma.quiz.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends quizDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quizDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quizzes
     * const quiz = await prisma.quiz.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends quizUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, quizUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Quiz.
     * @param {quizUpsertArgs} args - Arguments to update or create a Quiz.
     * @example
     * // Update or create a Quiz
     * const quiz = await prisma.quiz.upsert({
     *   create: {
     *     // ... data to create a Quiz
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quiz we want to update
     *   }
     * })
    **/
    upsert<T extends quizUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, quizUpsertArgs<ExtArgs>>
    ): Prisma__quizClient<$Result.GetResult<Prisma.$quizPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizCountArgs} args - Arguments to filter Quizzes to count.
     * @example
     * // Count the number of Quizzes
     * const count = await prisma.quiz.count({
     *   where: {
     *     // ... the filter for the Quizzes we want to count
     *   }
     * })
    **/
    count<T extends quizCountArgs>(
      args?: Subset<T, quizCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizAggregateArgs>(args: Subset<T, QuizAggregateArgs>): Prisma.PrismaPromise<GetQuizAggregateType<T>>

    /**
     * Group by Quiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends quizGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: quizGroupByArgs['orderBy'] }
        : { orderBy?: quizGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, quizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the quiz model
   */
  readonly fields: quizFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for quiz.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__quizClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    questions<T extends quiz$questionsArgs<ExtArgs> = {}>(args?: Subset<T, quiz$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'findMany'> | Null>;

    histories<T extends quiz$historiesArgs<ExtArgs> = {}>(args?: Subset<T, quiz$historiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizHistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the quiz model
   */ 
  interface quizFieldRefs {
    readonly id: FieldRef<"quiz", 'Int'>
    readonly createdById: FieldRef<"quiz", 'String'>
    readonly topic: FieldRef<"quiz", 'String'>
    readonly createdAt: FieldRef<"quiz", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * quiz findUnique
   */
  export type quizFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * Filter, which quiz to fetch.
     */
    where: quizWhereUniqueInput
  }


  /**
   * quiz findUniqueOrThrow
   */
  export type quizFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * Filter, which quiz to fetch.
     */
    where: quizWhereUniqueInput
  }


  /**
   * quiz findFirst
   */
  export type quizFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * Filter, which quiz to fetch.
     */
    where?: quizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizOrderByWithRelationInput | quizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quizzes.
     */
    cursor?: quizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quizzes.
     */
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }


  /**
   * quiz findFirstOrThrow
   */
  export type quizFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * Filter, which quiz to fetch.
     */
    where?: quizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizOrderByWithRelationInput | quizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quizzes.
     */
    cursor?: quizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quizzes.
     */
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }


  /**
   * quiz findMany
   */
  export type quizFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where?: quizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizOrderByWithRelationInput | quizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing quizzes.
     */
    cursor?: quizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }


  /**
   * quiz create
   */
  export type quizCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * The data needed to create a quiz.
     */
    data: XOR<quizCreateInput, quizUncheckedCreateInput>
  }


  /**
   * quiz createMany
   */
  export type quizCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many quizzes.
     */
    data: quizCreateManyInput | quizCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * quiz update
   */
  export type quizUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * The data needed to update a quiz.
     */
    data: XOR<quizUpdateInput, quizUncheckedUpdateInput>
    /**
     * Choose, which quiz to update.
     */
    where: quizWhereUniqueInput
  }


  /**
   * quiz updateMany
   */
  export type quizUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update quizzes.
     */
    data: XOR<quizUpdateManyMutationInput, quizUncheckedUpdateManyInput>
    /**
     * Filter which quizzes to update
     */
    where?: quizWhereInput
  }


  /**
   * quiz upsert
   */
  export type quizUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * The filter to search for the quiz to update in case it exists.
     */
    where: quizWhereUniqueInput
    /**
     * In case the quiz found by the `where` argument doesn't exist, create a new quiz with this data.
     */
    create: XOR<quizCreateInput, quizUncheckedCreateInput>
    /**
     * In case the quiz was found with the provided `where` argument, update it with this data.
     */
    update: XOR<quizUpdateInput, quizUncheckedUpdateInput>
  }


  /**
   * quiz delete
   */
  export type quizDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * Filter which quiz to delete.
     */
    where: quizWhereUniqueInput
  }


  /**
   * quiz deleteMany
   */
  export type quizDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which quizzes to delete
     */
    where?: quizWhereInput
  }


  /**
   * quiz.questions
   */
  export type quiz$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    where?: questionWhereInput
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    cursor?: questionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }


  /**
   * quiz.histories
   */
  export type quiz$historiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizHistory
     */
    select?: quizHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizHistoryInclude<ExtArgs> | null
    where?: quizHistoryWhereInput
    orderBy?: quizHistoryOrderByWithRelationInput | quizHistoryOrderByWithRelationInput[]
    cursor?: quizHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizHistoryScalarFieldEnum | QuizHistoryScalarFieldEnum[]
  }


  /**
   * quiz without action
   */
  export type quizDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
  }



  /**
   * Model question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    id: number | null
    quizId: number | null
  }

  export type QuestionSumAggregateOutputType = {
    id: number | null
    quizId: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: number | null
    quizId: number | null
    text: string | null
    correctAnswer: string | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: number | null
    quizId: number | null
    text: string | null
    correctAnswer: string | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    quizId: number
    text: number
    options: number
    correctAnswer: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    id?: true
    quizId?: true
  }

  export type QuestionSumAggregateInputType = {
    id?: true
    quizId?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    quizId?: true
    text?: true
    correctAnswer?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    quizId?: true
    text?: true
    correctAnswer?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    quizId?: true
    text?: true
    options?: true
    correctAnswer?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which question to aggregate.
     */
    where?: questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type questionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionWhereInput
    orderBy?: questionOrderByWithAggregationInput | questionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: questionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: number
    quizId: number
    text: string
    options: string[]
    correctAnswer: string
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends questionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type questionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quizId?: boolean
    text?: boolean
    options?: boolean
    correctAnswer?: boolean
    quiz?: boolean | quizDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type questionSelectScalar = {
    id?: boolean
    quizId?: boolean
    text?: boolean
    options?: boolean
    correctAnswer?: boolean
  }

  export type questionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quiz?: boolean | quizDefaultArgs<ExtArgs>
  }


  export type $questionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "question"
    objects: {
      quiz: Prisma.$quizPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      quizId: number
      text: string
      options: string[]
      correctAnswer: string
    }, ExtArgs["result"]["question"]>
    composites: {}
  }


  type questionGetPayload<S extends boolean | null | undefined | questionDefaultArgs> = $Result.GetResult<Prisma.$questionPayload, S>

  type questionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<questionFindManyArgs, 'select' | 'include'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface questionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['question'], meta: { name: 'question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {questionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends questionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, questionFindUniqueArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Question that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {questionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends questionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, questionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends questionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, questionFindFirstArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends questionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, questionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends questionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Question.
     * @param {questionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
    **/
    create<T extends questionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, questionCreateArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Questions.
     *     @param {questionCreateManyArgs} args - Arguments to create many Questions.
     *     @example
     *     // Create many Questions
     *     const question = await prisma.question.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends questionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Question.
     * @param {questionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
    **/
    delete<T extends questionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, questionDeleteArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Question.
     * @param {questionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends questionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, questionUpdateArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {questionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends questionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends questionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, questionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {questionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
    **/
    upsert<T extends questionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, questionUpsertArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends questionCountArgs>(
      args?: Subset<T, questionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends questionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: questionGroupByArgs['orderBy'] }
        : { orderBy?: questionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, questionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the question model
   */
  readonly fields: questionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__questionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    quiz<T extends quizDefaultArgs<ExtArgs> = {}>(args?: Subset<T, quizDefaultArgs<ExtArgs>>): Prisma__quizClient<$Result.GetResult<Prisma.$quizPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the question model
   */ 
  interface questionFieldRefs {
    readonly id: FieldRef<"question", 'Int'>
    readonly quizId: FieldRef<"question", 'Int'>
    readonly text: FieldRef<"question", 'String'>
    readonly options: FieldRef<"question", 'String[]'>
    readonly correctAnswer: FieldRef<"question", 'String'>
  }
    

  // Custom InputTypes

  /**
   * question findUnique
   */
  export type questionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which question to fetch.
     */
    where: questionWhereUniqueInput
  }


  /**
   * question findUniqueOrThrow
   */
  export type questionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which question to fetch.
     */
    where: questionWhereUniqueInput
  }


  /**
   * question findFirst
   */
  export type questionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which question to fetch.
     */
    where?: questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }


  /**
   * question findFirstOrThrow
   */
  export type questionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which question to fetch.
     */
    where?: questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }


  /**
   * question findMany
   */
  export type questionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing questions.
     */
    cursor?: questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }


  /**
   * question create
   */
  export type questionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * The data needed to create a question.
     */
    data: XOR<questionCreateInput, questionUncheckedCreateInput>
  }


  /**
   * question createMany
   */
  export type questionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many questions.
     */
    data: questionCreateManyInput | questionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * question update
   */
  export type questionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * The data needed to update a question.
     */
    data: XOR<questionUpdateInput, questionUncheckedUpdateInput>
    /**
     * Choose, which question to update.
     */
    where: questionWhereUniqueInput
  }


  /**
   * question updateMany
   */
  export type questionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update questions.
     */
    data: XOR<questionUpdateManyMutationInput, questionUncheckedUpdateManyInput>
    /**
     * Filter which questions to update
     */
    where?: questionWhereInput
  }


  /**
   * question upsert
   */
  export type questionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * The filter to search for the question to update in case it exists.
     */
    where: questionWhereUniqueInput
    /**
     * In case the question found by the `where` argument doesn't exist, create a new question with this data.
     */
    create: XOR<questionCreateInput, questionUncheckedCreateInput>
    /**
     * In case the question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<questionUpdateInput, questionUncheckedUpdateInput>
  }


  /**
   * question delete
   */
  export type questionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter which question to delete.
     */
    where: questionWhereUniqueInput
  }


  /**
   * question deleteMany
   */
  export type questionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questions to delete
     */
    where?: questionWhereInput
  }


  /**
   * question without action
   */
  export type questionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
  }



  /**
   * Model quizHistory
   */

  export type AggregateQuizHistory = {
    _count: QuizHistoryCountAggregateOutputType | null
    _avg: QuizHistoryAvgAggregateOutputType | null
    _sum: QuizHistorySumAggregateOutputType | null
    _min: QuizHistoryMinAggregateOutputType | null
    _max: QuizHistoryMaxAggregateOutputType | null
  }

  export type QuizHistoryAvgAggregateOutputType = {
    id: number | null
    quizId: number | null
    score: number | null
  }

  export type QuizHistorySumAggregateOutputType = {
    id: number | null
    quizId: number | null
    score: number | null
  }

  export type QuizHistoryMinAggregateOutputType = {
    id: number | null
    userId: string | null
    quizId: number | null
    score: number | null
    attemptedAt: Date | null
  }

  export type QuizHistoryMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    quizId: number | null
    score: number | null
    attemptedAt: Date | null
  }

  export type QuizHistoryCountAggregateOutputType = {
    id: number
    userId: number
    quizId: number
    score: number
    attemptedAt: number
    _all: number
  }


  export type QuizHistoryAvgAggregateInputType = {
    id?: true
    quizId?: true
    score?: true
  }

  export type QuizHistorySumAggregateInputType = {
    id?: true
    quizId?: true
    score?: true
  }

  export type QuizHistoryMinAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    score?: true
    attemptedAt?: true
  }

  export type QuizHistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    score?: true
    attemptedAt?: true
  }

  export type QuizHistoryCountAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    score?: true
    attemptedAt?: true
    _all?: true
  }

  export type QuizHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which quizHistory to aggregate.
     */
    where?: quizHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizHistories to fetch.
     */
    orderBy?: quizHistoryOrderByWithRelationInput | quizHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: quizHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned quizHistories
    **/
    _count?: true | QuizHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuizHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuizHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizHistoryMaxAggregateInputType
  }

  export type GetQuizHistoryAggregateType<T extends QuizHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateQuizHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuizHistory[P]>
      : GetScalarType<T[P], AggregateQuizHistory[P]>
  }




  export type quizHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quizHistoryWhereInput
    orderBy?: quizHistoryOrderByWithAggregationInput | quizHistoryOrderByWithAggregationInput[]
    by: QuizHistoryScalarFieldEnum[] | QuizHistoryScalarFieldEnum
    having?: quizHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizHistoryCountAggregateInputType | true
    _avg?: QuizHistoryAvgAggregateInputType
    _sum?: QuizHistorySumAggregateInputType
    _min?: QuizHistoryMinAggregateInputType
    _max?: QuizHistoryMaxAggregateInputType
  }

  export type QuizHistoryGroupByOutputType = {
    id: number
    userId: string
    quizId: number
    score: number
    attemptedAt: Date
    _count: QuizHistoryCountAggregateOutputType | null
    _avg: QuizHistoryAvgAggregateOutputType | null
    _sum: QuizHistorySumAggregateOutputType | null
    _min: QuizHistoryMinAggregateOutputType | null
    _max: QuizHistoryMaxAggregateOutputType | null
  }

  type GetQuizHistoryGroupByPayload<T extends quizHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuizHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], QuizHistoryGroupByOutputType[P]>
        }
      >
    >


  export type quizHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    quizId?: boolean
    score?: boolean
    attemptedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    quiz?: boolean | quizDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quizHistory"]>

  export type quizHistorySelectScalar = {
    id?: boolean
    userId?: boolean
    quizId?: boolean
    score?: boolean
    attemptedAt?: boolean
  }

  export type quizHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    quiz?: boolean | quizDefaultArgs<ExtArgs>
  }


  export type $quizHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "quizHistory"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      quiz: Prisma.$quizPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      quizId: number
      score: number
      attemptedAt: Date
    }, ExtArgs["result"]["quizHistory"]>
    composites: {}
  }


  type quizHistoryGetPayload<S extends boolean | null | undefined | quizHistoryDefaultArgs> = $Result.GetResult<Prisma.$quizHistoryPayload, S>

  type quizHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<quizHistoryFindManyArgs, 'select' | 'include'> & {
      select?: QuizHistoryCountAggregateInputType | true
    }

  export interface quizHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['quizHistory'], meta: { name: 'quizHistory' } }
    /**
     * Find zero or one QuizHistory that matches the filter.
     * @param {quizHistoryFindUniqueArgs} args - Arguments to find a QuizHistory
     * @example
     * // Get one QuizHistory
     * const quizHistory = await prisma.quizHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends quizHistoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, quizHistoryFindUniqueArgs<ExtArgs>>
    ): Prisma__quizHistoryClient<$Result.GetResult<Prisma.$quizHistoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one QuizHistory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {quizHistoryFindUniqueOrThrowArgs} args - Arguments to find a QuizHistory
     * @example
     * // Get one QuizHistory
     * const quizHistory = await prisma.quizHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends quizHistoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, quizHistoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__quizHistoryClient<$Result.GetResult<Prisma.$quizHistoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first QuizHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizHistoryFindFirstArgs} args - Arguments to find a QuizHistory
     * @example
     * // Get one QuizHistory
     * const quizHistory = await prisma.quizHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends quizHistoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, quizHistoryFindFirstArgs<ExtArgs>>
    ): Prisma__quizHistoryClient<$Result.GetResult<Prisma.$quizHistoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first QuizHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizHistoryFindFirstOrThrowArgs} args - Arguments to find a QuizHistory
     * @example
     * // Get one QuizHistory
     * const quizHistory = await prisma.quizHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends quizHistoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, quizHistoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__quizHistoryClient<$Result.GetResult<Prisma.$quizHistoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more QuizHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizHistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuizHistories
     * const quizHistories = await prisma.quizHistory.findMany()
     * 
     * // Get first 10 QuizHistories
     * const quizHistories = await prisma.quizHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quizHistoryWithIdOnly = await prisma.quizHistory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends quizHistoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quizHistoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizHistoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a QuizHistory.
     * @param {quizHistoryCreateArgs} args - Arguments to create a QuizHistory.
     * @example
     * // Create one QuizHistory
     * const QuizHistory = await prisma.quizHistory.create({
     *   data: {
     *     // ... data to create a QuizHistory
     *   }
     * })
     * 
    **/
    create<T extends quizHistoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, quizHistoryCreateArgs<ExtArgs>>
    ): Prisma__quizHistoryClient<$Result.GetResult<Prisma.$quizHistoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many QuizHistories.
     *     @param {quizHistoryCreateManyArgs} args - Arguments to create many QuizHistories.
     *     @example
     *     // Create many QuizHistories
     *     const quizHistory = await prisma.quizHistory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends quizHistoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quizHistoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a QuizHistory.
     * @param {quizHistoryDeleteArgs} args - Arguments to delete one QuizHistory.
     * @example
     * // Delete one QuizHistory
     * const QuizHistory = await prisma.quizHistory.delete({
     *   where: {
     *     // ... filter to delete one QuizHistory
     *   }
     * })
     * 
    **/
    delete<T extends quizHistoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, quizHistoryDeleteArgs<ExtArgs>>
    ): Prisma__quizHistoryClient<$Result.GetResult<Prisma.$quizHistoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one QuizHistory.
     * @param {quizHistoryUpdateArgs} args - Arguments to update one QuizHistory.
     * @example
     * // Update one QuizHistory
     * const quizHistory = await prisma.quizHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends quizHistoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, quizHistoryUpdateArgs<ExtArgs>>
    ): Prisma__quizHistoryClient<$Result.GetResult<Prisma.$quizHistoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more QuizHistories.
     * @param {quizHistoryDeleteManyArgs} args - Arguments to filter QuizHistories to delete.
     * @example
     * // Delete a few QuizHistories
     * const { count } = await prisma.quizHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends quizHistoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quizHistoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuizHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuizHistories
     * const quizHistory = await prisma.quizHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends quizHistoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, quizHistoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one QuizHistory.
     * @param {quizHistoryUpsertArgs} args - Arguments to update or create a QuizHistory.
     * @example
     * // Update or create a QuizHistory
     * const quizHistory = await prisma.quizHistory.upsert({
     *   create: {
     *     // ... data to create a QuizHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuizHistory we want to update
     *   }
     * })
    **/
    upsert<T extends quizHistoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, quizHistoryUpsertArgs<ExtArgs>>
    ): Prisma__quizHistoryClient<$Result.GetResult<Prisma.$quizHistoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of QuizHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizHistoryCountArgs} args - Arguments to filter QuizHistories to count.
     * @example
     * // Count the number of QuizHistories
     * const count = await prisma.quizHistory.count({
     *   where: {
     *     // ... the filter for the QuizHistories we want to count
     *   }
     * })
    **/
    count<T extends quizHistoryCountArgs>(
      args?: Subset<T, quizHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuizHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizHistoryAggregateArgs>(args: Subset<T, QuizHistoryAggregateArgs>): Prisma.PrismaPromise<GetQuizHistoryAggregateType<T>>

    /**
     * Group by QuizHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends quizHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: quizHistoryGroupByArgs['orderBy'] }
        : { orderBy?: quizHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, quizHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the quizHistory model
   */
  readonly fields: quizHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for quizHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__quizHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    quiz<T extends quizDefaultArgs<ExtArgs> = {}>(args?: Subset<T, quizDefaultArgs<ExtArgs>>): Prisma__quizClient<$Result.GetResult<Prisma.$quizPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the quizHistory model
   */ 
  interface quizHistoryFieldRefs {
    readonly id: FieldRef<"quizHistory", 'Int'>
    readonly userId: FieldRef<"quizHistory", 'String'>
    readonly quizId: FieldRef<"quizHistory", 'Int'>
    readonly score: FieldRef<"quizHistory", 'Int'>
    readonly attemptedAt: FieldRef<"quizHistory", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * quizHistory findUnique
   */
  export type quizHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizHistory
     */
    select?: quizHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizHistoryInclude<ExtArgs> | null
    /**
     * Filter, which quizHistory to fetch.
     */
    where: quizHistoryWhereUniqueInput
  }


  /**
   * quizHistory findUniqueOrThrow
   */
  export type quizHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizHistory
     */
    select?: quizHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizHistoryInclude<ExtArgs> | null
    /**
     * Filter, which quizHistory to fetch.
     */
    where: quizHistoryWhereUniqueInput
  }


  /**
   * quizHistory findFirst
   */
  export type quizHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizHistory
     */
    select?: quizHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizHistoryInclude<ExtArgs> | null
    /**
     * Filter, which quizHistory to fetch.
     */
    where?: quizHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizHistories to fetch.
     */
    orderBy?: quizHistoryOrderByWithRelationInput | quizHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quizHistories.
     */
    cursor?: quizHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quizHistories.
     */
    distinct?: QuizHistoryScalarFieldEnum | QuizHistoryScalarFieldEnum[]
  }


  /**
   * quizHistory findFirstOrThrow
   */
  export type quizHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizHistory
     */
    select?: quizHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizHistoryInclude<ExtArgs> | null
    /**
     * Filter, which quizHistory to fetch.
     */
    where?: quizHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizHistories to fetch.
     */
    orderBy?: quizHistoryOrderByWithRelationInput | quizHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quizHistories.
     */
    cursor?: quizHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quizHistories.
     */
    distinct?: QuizHistoryScalarFieldEnum | QuizHistoryScalarFieldEnum[]
  }


  /**
   * quizHistory findMany
   */
  export type quizHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizHistory
     */
    select?: quizHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizHistoryInclude<ExtArgs> | null
    /**
     * Filter, which quizHistories to fetch.
     */
    where?: quizHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizHistories to fetch.
     */
    orderBy?: quizHistoryOrderByWithRelationInput | quizHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing quizHistories.
     */
    cursor?: quizHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizHistories.
     */
    skip?: number
    distinct?: QuizHistoryScalarFieldEnum | QuizHistoryScalarFieldEnum[]
  }


  /**
   * quizHistory create
   */
  export type quizHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizHistory
     */
    select?: quizHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a quizHistory.
     */
    data: XOR<quizHistoryCreateInput, quizHistoryUncheckedCreateInput>
  }


  /**
   * quizHistory createMany
   */
  export type quizHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many quizHistories.
     */
    data: quizHistoryCreateManyInput | quizHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * quizHistory update
   */
  export type quizHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizHistory
     */
    select?: quizHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a quizHistory.
     */
    data: XOR<quizHistoryUpdateInput, quizHistoryUncheckedUpdateInput>
    /**
     * Choose, which quizHistory to update.
     */
    where: quizHistoryWhereUniqueInput
  }


  /**
   * quizHistory updateMany
   */
  export type quizHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update quizHistories.
     */
    data: XOR<quizHistoryUpdateManyMutationInput, quizHistoryUncheckedUpdateManyInput>
    /**
     * Filter which quizHistories to update
     */
    where?: quizHistoryWhereInput
  }


  /**
   * quizHistory upsert
   */
  export type quizHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizHistory
     */
    select?: quizHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the quizHistory to update in case it exists.
     */
    where: quizHistoryWhereUniqueInput
    /**
     * In case the quizHistory found by the `where` argument doesn't exist, create a new quizHistory with this data.
     */
    create: XOR<quizHistoryCreateInput, quizHistoryUncheckedCreateInput>
    /**
     * In case the quizHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<quizHistoryUpdateInput, quizHistoryUncheckedUpdateInput>
  }


  /**
   * quizHistory delete
   */
  export type quizHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizHistory
     */
    select?: quizHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizHistoryInclude<ExtArgs> | null
    /**
     * Filter which quizHistory to delete.
     */
    where: quizHistoryWhereUniqueInput
  }


  /**
   * quizHistory deleteMany
   */
  export type quizHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which quizHistories to delete
     */
    where?: quizHistoryWhereInput
  }


  /**
   * quizHistory without action
   */
  export type quizHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizHistory
     */
    select?: quizHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizHistoryInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    oauth_id: 'oauth_id'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const QuizScalarFieldEnum: {
    id: 'id',
    createdById: 'createdById',
    topic: 'topic',
    createdAt: 'createdAt'
  };

  export type QuizScalarFieldEnum = (typeof QuizScalarFieldEnum)[keyof typeof QuizScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    quizId: 'quizId',
    text: 'text',
    options: 'options',
    correctAnswer: 'correctAnswer'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const QuizHistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    quizId: 'quizId',
    score: 'score',
    attemptedAt: 'attemptedAt'
  };

  export type QuizHistoryScalarFieldEnum = (typeof QuizHistoryScalarFieldEnum)[keyof typeof QuizHistoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    password?: StringNullableFilter<"user"> | string | null
    oauth_id?: StringNullableFilter<"user"> | string | null
    quizzes?: QuizListRelationFilter
    quizHistories?: QuizHistoryListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    oauth_id?: SortOrderInput | SortOrder
    quizzes?: quizOrderByRelationAggregateInput
    quizHistories?: quizHistoryOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    oauth_id?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    password?: StringNullableFilter<"user"> | string | null
    quizzes?: QuizListRelationFilter
    quizHistories?: QuizHistoryListRelationFilter
  }, "id" | "email" | "oauth_id">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    oauth_id?: SortOrderInput | SortOrder
    _count?: userCountOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    password?: StringNullableWithAggregatesFilter<"user"> | string | null
    oauth_id?: StringNullableWithAggregatesFilter<"user"> | string | null
  }

  export type quizWhereInput = {
    AND?: quizWhereInput | quizWhereInput[]
    OR?: quizWhereInput[]
    NOT?: quizWhereInput | quizWhereInput[]
    id?: IntFilter<"quiz"> | number
    createdById?: StringFilter<"quiz"> | string
    topic?: StringFilter<"quiz"> | string
    createdAt?: DateTimeFilter<"quiz"> | Date | string
    createdBy?: XOR<UserRelationFilter, userWhereInput>
    questions?: QuestionListRelationFilter
    histories?: QuizHistoryListRelationFilter
  }

  export type quizOrderByWithRelationInput = {
    id?: SortOrder
    createdById?: SortOrder
    topic?: SortOrder
    createdAt?: SortOrder
    createdBy?: userOrderByWithRelationInput
    questions?: questionOrderByRelationAggregateInput
    histories?: quizHistoryOrderByRelationAggregateInput
  }

  export type quizWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: quizWhereInput | quizWhereInput[]
    OR?: quizWhereInput[]
    NOT?: quizWhereInput | quizWhereInput[]
    createdById?: StringFilter<"quiz"> | string
    topic?: StringFilter<"quiz"> | string
    createdAt?: DateTimeFilter<"quiz"> | Date | string
    createdBy?: XOR<UserRelationFilter, userWhereInput>
    questions?: QuestionListRelationFilter
    histories?: QuizHistoryListRelationFilter
  }, "id">

  export type quizOrderByWithAggregationInput = {
    id?: SortOrder
    createdById?: SortOrder
    topic?: SortOrder
    createdAt?: SortOrder
    _count?: quizCountOrderByAggregateInput
    _avg?: quizAvgOrderByAggregateInput
    _max?: quizMaxOrderByAggregateInput
    _min?: quizMinOrderByAggregateInput
    _sum?: quizSumOrderByAggregateInput
  }

  export type quizScalarWhereWithAggregatesInput = {
    AND?: quizScalarWhereWithAggregatesInput | quizScalarWhereWithAggregatesInput[]
    OR?: quizScalarWhereWithAggregatesInput[]
    NOT?: quizScalarWhereWithAggregatesInput | quizScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"quiz"> | number
    createdById?: StringWithAggregatesFilter<"quiz"> | string
    topic?: StringWithAggregatesFilter<"quiz"> | string
    createdAt?: DateTimeWithAggregatesFilter<"quiz"> | Date | string
  }

  export type questionWhereInput = {
    AND?: questionWhereInput | questionWhereInput[]
    OR?: questionWhereInput[]
    NOT?: questionWhereInput | questionWhereInput[]
    id?: IntFilter<"question"> | number
    quizId?: IntFilter<"question"> | number
    text?: StringFilter<"question"> | string
    options?: StringNullableListFilter<"question">
    correctAnswer?: StringFilter<"question"> | string
    quiz?: XOR<QuizRelationFilter, quizWhereInput>
  }

  export type questionOrderByWithRelationInput = {
    id?: SortOrder
    quizId?: SortOrder
    text?: SortOrder
    options?: SortOrder
    correctAnswer?: SortOrder
    quiz?: quizOrderByWithRelationInput
  }

  export type questionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: questionWhereInput | questionWhereInput[]
    OR?: questionWhereInput[]
    NOT?: questionWhereInput | questionWhereInput[]
    quizId?: IntFilter<"question"> | number
    text?: StringFilter<"question"> | string
    options?: StringNullableListFilter<"question">
    correctAnswer?: StringFilter<"question"> | string
    quiz?: XOR<QuizRelationFilter, quizWhereInput>
  }, "id">

  export type questionOrderByWithAggregationInput = {
    id?: SortOrder
    quizId?: SortOrder
    text?: SortOrder
    options?: SortOrder
    correctAnswer?: SortOrder
    _count?: questionCountOrderByAggregateInput
    _avg?: questionAvgOrderByAggregateInput
    _max?: questionMaxOrderByAggregateInput
    _min?: questionMinOrderByAggregateInput
    _sum?: questionSumOrderByAggregateInput
  }

  export type questionScalarWhereWithAggregatesInput = {
    AND?: questionScalarWhereWithAggregatesInput | questionScalarWhereWithAggregatesInput[]
    OR?: questionScalarWhereWithAggregatesInput[]
    NOT?: questionScalarWhereWithAggregatesInput | questionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"question"> | number
    quizId?: IntWithAggregatesFilter<"question"> | number
    text?: StringWithAggregatesFilter<"question"> | string
    options?: StringNullableListFilter<"question">
    correctAnswer?: StringWithAggregatesFilter<"question"> | string
  }

  export type quizHistoryWhereInput = {
    AND?: quizHistoryWhereInput | quizHistoryWhereInput[]
    OR?: quizHistoryWhereInput[]
    NOT?: quizHistoryWhereInput | quizHistoryWhereInput[]
    id?: IntFilter<"quizHistory"> | number
    userId?: StringFilter<"quizHistory"> | string
    quizId?: IntFilter<"quizHistory"> | number
    score?: IntFilter<"quizHistory"> | number
    attemptedAt?: DateTimeFilter<"quizHistory"> | Date | string
    user?: XOR<UserRelationFilter, userWhereInput>
    quiz?: XOR<QuizRelationFilter, quizWhereInput>
  }

  export type quizHistoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
    attemptedAt?: SortOrder
    user?: userOrderByWithRelationInput
    quiz?: quizOrderByWithRelationInput
  }

  export type quizHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: quizHistoryWhereInput | quizHistoryWhereInput[]
    OR?: quizHistoryWhereInput[]
    NOT?: quizHistoryWhereInput | quizHistoryWhereInput[]
    userId?: StringFilter<"quizHistory"> | string
    quizId?: IntFilter<"quizHistory"> | number
    score?: IntFilter<"quizHistory"> | number
    attemptedAt?: DateTimeFilter<"quizHistory"> | Date | string
    user?: XOR<UserRelationFilter, userWhereInput>
    quiz?: XOR<QuizRelationFilter, quizWhereInput>
  }, "id">

  export type quizHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
    attemptedAt?: SortOrder
    _count?: quizHistoryCountOrderByAggregateInput
    _avg?: quizHistoryAvgOrderByAggregateInput
    _max?: quizHistoryMaxOrderByAggregateInput
    _min?: quizHistoryMinOrderByAggregateInput
    _sum?: quizHistorySumOrderByAggregateInput
  }

  export type quizHistoryScalarWhereWithAggregatesInput = {
    AND?: quizHistoryScalarWhereWithAggregatesInput | quizHistoryScalarWhereWithAggregatesInput[]
    OR?: quizHistoryScalarWhereWithAggregatesInput[]
    NOT?: quizHistoryScalarWhereWithAggregatesInput | quizHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"quizHistory"> | number
    userId?: StringWithAggregatesFilter<"quizHistory"> | string
    quizId?: IntWithAggregatesFilter<"quizHistory"> | number
    score?: IntWithAggregatesFilter<"quizHistory"> | number
    attemptedAt?: DateTimeWithAggregatesFilter<"quizHistory"> | Date | string
  }

  export type userCreateInput = {
    id?: string
    email: string
    password?: string | null
    oauth_id?: string | null
    quizzes?: quizCreateNestedManyWithoutCreatedByInput
    quizHistories?: quizHistoryCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: string
    email: string
    password?: string | null
    oauth_id?: string | null
    quizzes?: quizUncheckedCreateNestedManyWithoutCreatedByInput
    quizHistories?: quizHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_id?: NullableStringFieldUpdateOperationsInput | string | null
    quizzes?: quizUpdateManyWithoutCreatedByNestedInput
    quizHistories?: quizHistoryUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_id?: NullableStringFieldUpdateOperationsInput | string | null
    quizzes?: quizUncheckedUpdateManyWithoutCreatedByNestedInput
    quizHistories?: quizHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: string
    email: string
    password?: string | null
    oauth_id?: string | null
  }

  export type userUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type quizCreateInput = {
    topic: string
    createdAt?: Date | string
    createdBy: userCreateNestedOneWithoutQuizzesInput
    questions?: questionCreateNestedManyWithoutQuizInput
    histories?: quizHistoryCreateNestedManyWithoutQuizInput
  }

  export type quizUncheckedCreateInput = {
    id?: number
    createdById: string
    topic: string
    createdAt?: Date | string
    questions?: questionUncheckedCreateNestedManyWithoutQuizInput
    histories?: quizHistoryUncheckedCreateNestedManyWithoutQuizInput
  }

  export type quizUpdateInput = {
    topic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: userUpdateOneRequiredWithoutQuizzesNestedInput
    questions?: questionUpdateManyWithoutQuizNestedInput
    histories?: quizHistoryUpdateManyWithoutQuizNestedInput
  }

  export type quizUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdById?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: questionUncheckedUpdateManyWithoutQuizNestedInput
    histories?: quizHistoryUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type quizCreateManyInput = {
    id?: number
    createdById: string
    topic: string
    createdAt?: Date | string
  }

  export type quizUpdateManyMutationInput = {
    topic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type quizUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdById?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type questionCreateInput = {
    text: string
    options?: questionCreateoptionsInput | string[]
    correctAnswer: string
    quiz: quizCreateNestedOneWithoutQuestionsInput
  }

  export type questionUncheckedCreateInput = {
    id?: number
    quizId: number
    text: string
    options?: questionCreateoptionsInput | string[]
    correctAnswer: string
  }

  export type questionUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    options?: questionUpdateoptionsInput | string[]
    correctAnswer?: StringFieldUpdateOperationsInput | string
    quiz?: quizUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type questionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    options?: questionUpdateoptionsInput | string[]
    correctAnswer?: StringFieldUpdateOperationsInput | string
  }

  export type questionCreateManyInput = {
    id?: number
    quizId: number
    text: string
    options?: questionCreateoptionsInput | string[]
    correctAnswer: string
  }

  export type questionUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
    options?: questionUpdateoptionsInput | string[]
    correctAnswer?: StringFieldUpdateOperationsInput | string
  }

  export type questionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    options?: questionUpdateoptionsInput | string[]
    correctAnswer?: StringFieldUpdateOperationsInput | string
  }

  export type quizHistoryCreateInput = {
    score: number
    attemptedAt?: Date | string
    user: userCreateNestedOneWithoutQuizHistoriesInput
    quiz: quizCreateNestedOneWithoutHistoriesInput
  }

  export type quizHistoryUncheckedCreateInput = {
    id?: number
    userId: string
    quizId: number
    score: number
    attemptedAt?: Date | string
  }

  export type quizHistoryUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    attemptedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutQuizHistoriesNestedInput
    quiz?: quizUpdateOneRequiredWithoutHistoriesNestedInput
  }

  export type quizHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    quizId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    attemptedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type quizHistoryCreateManyInput = {
    id?: number
    userId: string
    quizId: number
    score: number
    attemptedAt?: Date | string
  }

  export type quizHistoryUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
    attemptedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type quizHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    quizId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    attemptedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type QuizListRelationFilter = {
    every?: quizWhereInput
    some?: quizWhereInput
    none?: quizWhereInput
  }

  export type QuizHistoryListRelationFilter = {
    every?: quizHistoryWhereInput
    some?: quizHistoryWhereInput
    none?: quizHistoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type quizOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type quizHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    oauth_id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    oauth_id?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    oauth_id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: questionWhereInput
    some?: questionWhereInput
    none?: questionWhereInput
  }

  export type questionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type quizCountOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
    topic?: SortOrder
    createdAt?: SortOrder
  }

  export type quizAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type quizMaxOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
    topic?: SortOrder
    createdAt?: SortOrder
  }

  export type quizMinOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
    topic?: SortOrder
    createdAt?: SortOrder
  }

  export type quizSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type QuizRelationFilter = {
    is?: quizWhereInput
    isNot?: quizWhereInput
  }

  export type questionCountOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    text?: SortOrder
    options?: SortOrder
    correctAnswer?: SortOrder
  }

  export type questionAvgOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
  }

  export type questionMaxOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    text?: SortOrder
    correctAnswer?: SortOrder
  }

  export type questionMinOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    text?: SortOrder
    correctAnswer?: SortOrder
  }

  export type questionSumOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
  }

  export type quizHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
    attemptedAt?: SortOrder
  }

  export type quizHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
  }

  export type quizHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
    attemptedAt?: SortOrder
  }

  export type quizHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
    attemptedAt?: SortOrder
  }

  export type quizHistorySumOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
  }

  export type quizCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<quizCreateWithoutCreatedByInput, quizUncheckedCreateWithoutCreatedByInput> | quizCreateWithoutCreatedByInput[] | quizUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: quizCreateOrConnectWithoutCreatedByInput | quizCreateOrConnectWithoutCreatedByInput[]
    createMany?: quizCreateManyCreatedByInputEnvelope
    connect?: quizWhereUniqueInput | quizWhereUniqueInput[]
  }

  export type quizHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<quizHistoryCreateWithoutUserInput, quizHistoryUncheckedCreateWithoutUserInput> | quizHistoryCreateWithoutUserInput[] | quizHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: quizHistoryCreateOrConnectWithoutUserInput | quizHistoryCreateOrConnectWithoutUserInput[]
    createMany?: quizHistoryCreateManyUserInputEnvelope
    connect?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
  }

  export type quizUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<quizCreateWithoutCreatedByInput, quizUncheckedCreateWithoutCreatedByInput> | quizCreateWithoutCreatedByInput[] | quizUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: quizCreateOrConnectWithoutCreatedByInput | quizCreateOrConnectWithoutCreatedByInput[]
    createMany?: quizCreateManyCreatedByInputEnvelope
    connect?: quizWhereUniqueInput | quizWhereUniqueInput[]
  }

  export type quizHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<quizHistoryCreateWithoutUserInput, quizHistoryUncheckedCreateWithoutUserInput> | quizHistoryCreateWithoutUserInput[] | quizHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: quizHistoryCreateOrConnectWithoutUserInput | quizHistoryCreateOrConnectWithoutUserInput[]
    createMany?: quizHistoryCreateManyUserInputEnvelope
    connect?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type quizUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<quizCreateWithoutCreatedByInput, quizUncheckedCreateWithoutCreatedByInput> | quizCreateWithoutCreatedByInput[] | quizUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: quizCreateOrConnectWithoutCreatedByInput | quizCreateOrConnectWithoutCreatedByInput[]
    upsert?: quizUpsertWithWhereUniqueWithoutCreatedByInput | quizUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: quizCreateManyCreatedByInputEnvelope
    set?: quizWhereUniqueInput | quizWhereUniqueInput[]
    disconnect?: quizWhereUniqueInput | quizWhereUniqueInput[]
    delete?: quizWhereUniqueInput | quizWhereUniqueInput[]
    connect?: quizWhereUniqueInput | quizWhereUniqueInput[]
    update?: quizUpdateWithWhereUniqueWithoutCreatedByInput | quizUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: quizUpdateManyWithWhereWithoutCreatedByInput | quizUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: quizScalarWhereInput | quizScalarWhereInput[]
  }

  export type quizHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<quizHistoryCreateWithoutUserInput, quizHistoryUncheckedCreateWithoutUserInput> | quizHistoryCreateWithoutUserInput[] | quizHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: quizHistoryCreateOrConnectWithoutUserInput | quizHistoryCreateOrConnectWithoutUserInput[]
    upsert?: quizHistoryUpsertWithWhereUniqueWithoutUserInput | quizHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: quizHistoryCreateManyUserInputEnvelope
    set?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    disconnect?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    delete?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    connect?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    update?: quizHistoryUpdateWithWhereUniqueWithoutUserInput | quizHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: quizHistoryUpdateManyWithWhereWithoutUserInput | quizHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: quizHistoryScalarWhereInput | quizHistoryScalarWhereInput[]
  }

  export type quizUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<quizCreateWithoutCreatedByInput, quizUncheckedCreateWithoutCreatedByInput> | quizCreateWithoutCreatedByInput[] | quizUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: quizCreateOrConnectWithoutCreatedByInput | quizCreateOrConnectWithoutCreatedByInput[]
    upsert?: quizUpsertWithWhereUniqueWithoutCreatedByInput | quizUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: quizCreateManyCreatedByInputEnvelope
    set?: quizWhereUniqueInput | quizWhereUniqueInput[]
    disconnect?: quizWhereUniqueInput | quizWhereUniqueInput[]
    delete?: quizWhereUniqueInput | quizWhereUniqueInput[]
    connect?: quizWhereUniqueInput | quizWhereUniqueInput[]
    update?: quizUpdateWithWhereUniqueWithoutCreatedByInput | quizUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: quizUpdateManyWithWhereWithoutCreatedByInput | quizUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: quizScalarWhereInput | quizScalarWhereInput[]
  }

  export type quizHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<quizHistoryCreateWithoutUserInput, quizHistoryUncheckedCreateWithoutUserInput> | quizHistoryCreateWithoutUserInput[] | quizHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: quizHistoryCreateOrConnectWithoutUserInput | quizHistoryCreateOrConnectWithoutUserInput[]
    upsert?: quizHistoryUpsertWithWhereUniqueWithoutUserInput | quizHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: quizHistoryCreateManyUserInputEnvelope
    set?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    disconnect?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    delete?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    connect?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    update?: quizHistoryUpdateWithWhereUniqueWithoutUserInput | quizHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: quizHistoryUpdateManyWithWhereWithoutUserInput | quizHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: quizHistoryScalarWhereInput | quizHistoryScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutQuizzesInput = {
    create?: XOR<userCreateWithoutQuizzesInput, userUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: userCreateOrConnectWithoutQuizzesInput
    connect?: userWhereUniqueInput
  }

  export type questionCreateNestedManyWithoutQuizInput = {
    create?: XOR<questionCreateWithoutQuizInput, questionUncheckedCreateWithoutQuizInput> | questionCreateWithoutQuizInput[] | questionUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: questionCreateOrConnectWithoutQuizInput | questionCreateOrConnectWithoutQuizInput[]
    createMany?: questionCreateManyQuizInputEnvelope
    connect?: questionWhereUniqueInput | questionWhereUniqueInput[]
  }

  export type quizHistoryCreateNestedManyWithoutQuizInput = {
    create?: XOR<quizHistoryCreateWithoutQuizInput, quizHistoryUncheckedCreateWithoutQuizInput> | quizHistoryCreateWithoutQuizInput[] | quizHistoryUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: quizHistoryCreateOrConnectWithoutQuizInput | quizHistoryCreateOrConnectWithoutQuizInput[]
    createMany?: quizHistoryCreateManyQuizInputEnvelope
    connect?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
  }

  export type questionUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<questionCreateWithoutQuizInput, questionUncheckedCreateWithoutQuizInput> | questionCreateWithoutQuizInput[] | questionUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: questionCreateOrConnectWithoutQuizInput | questionCreateOrConnectWithoutQuizInput[]
    createMany?: questionCreateManyQuizInputEnvelope
    connect?: questionWhereUniqueInput | questionWhereUniqueInput[]
  }

  export type quizHistoryUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<quizHistoryCreateWithoutQuizInput, quizHistoryUncheckedCreateWithoutQuizInput> | quizHistoryCreateWithoutQuizInput[] | quizHistoryUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: quizHistoryCreateOrConnectWithoutQuizInput | quizHistoryCreateOrConnectWithoutQuizInput[]
    createMany?: quizHistoryCreateManyQuizInputEnvelope
    connect?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type userUpdateOneRequiredWithoutQuizzesNestedInput = {
    create?: XOR<userCreateWithoutQuizzesInput, userUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: userCreateOrConnectWithoutQuizzesInput
    upsert?: userUpsertWithoutQuizzesInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutQuizzesInput, userUpdateWithoutQuizzesInput>, userUncheckedUpdateWithoutQuizzesInput>
  }

  export type questionUpdateManyWithoutQuizNestedInput = {
    create?: XOR<questionCreateWithoutQuizInput, questionUncheckedCreateWithoutQuizInput> | questionCreateWithoutQuizInput[] | questionUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: questionCreateOrConnectWithoutQuizInput | questionCreateOrConnectWithoutQuizInput[]
    upsert?: questionUpsertWithWhereUniqueWithoutQuizInput | questionUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: questionCreateManyQuizInputEnvelope
    set?: questionWhereUniqueInput | questionWhereUniqueInput[]
    disconnect?: questionWhereUniqueInput | questionWhereUniqueInput[]
    delete?: questionWhereUniqueInput | questionWhereUniqueInput[]
    connect?: questionWhereUniqueInput | questionWhereUniqueInput[]
    update?: questionUpdateWithWhereUniqueWithoutQuizInput | questionUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: questionUpdateManyWithWhereWithoutQuizInput | questionUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: questionScalarWhereInput | questionScalarWhereInput[]
  }

  export type quizHistoryUpdateManyWithoutQuizNestedInput = {
    create?: XOR<quizHistoryCreateWithoutQuizInput, quizHistoryUncheckedCreateWithoutQuizInput> | quizHistoryCreateWithoutQuizInput[] | quizHistoryUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: quizHistoryCreateOrConnectWithoutQuizInput | quizHistoryCreateOrConnectWithoutQuizInput[]
    upsert?: quizHistoryUpsertWithWhereUniqueWithoutQuizInput | quizHistoryUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: quizHistoryCreateManyQuizInputEnvelope
    set?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    disconnect?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    delete?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    connect?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    update?: quizHistoryUpdateWithWhereUniqueWithoutQuizInput | quizHistoryUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: quizHistoryUpdateManyWithWhereWithoutQuizInput | quizHistoryUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: quizHistoryScalarWhereInput | quizHistoryScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type questionUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<questionCreateWithoutQuizInput, questionUncheckedCreateWithoutQuizInput> | questionCreateWithoutQuizInput[] | questionUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: questionCreateOrConnectWithoutQuizInput | questionCreateOrConnectWithoutQuizInput[]
    upsert?: questionUpsertWithWhereUniqueWithoutQuizInput | questionUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: questionCreateManyQuizInputEnvelope
    set?: questionWhereUniqueInput | questionWhereUniqueInput[]
    disconnect?: questionWhereUniqueInput | questionWhereUniqueInput[]
    delete?: questionWhereUniqueInput | questionWhereUniqueInput[]
    connect?: questionWhereUniqueInput | questionWhereUniqueInput[]
    update?: questionUpdateWithWhereUniqueWithoutQuizInput | questionUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: questionUpdateManyWithWhereWithoutQuizInput | questionUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: questionScalarWhereInput | questionScalarWhereInput[]
  }

  export type quizHistoryUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<quizHistoryCreateWithoutQuizInput, quizHistoryUncheckedCreateWithoutQuizInput> | quizHistoryCreateWithoutQuizInput[] | quizHistoryUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: quizHistoryCreateOrConnectWithoutQuizInput | quizHistoryCreateOrConnectWithoutQuizInput[]
    upsert?: quizHistoryUpsertWithWhereUniqueWithoutQuizInput | quizHistoryUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: quizHistoryCreateManyQuizInputEnvelope
    set?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    disconnect?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    delete?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    connect?: quizHistoryWhereUniqueInput | quizHistoryWhereUniqueInput[]
    update?: quizHistoryUpdateWithWhereUniqueWithoutQuizInput | quizHistoryUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: quizHistoryUpdateManyWithWhereWithoutQuizInput | quizHistoryUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: quizHistoryScalarWhereInput | quizHistoryScalarWhereInput[]
  }

  export type questionCreateoptionsInput = {
    set: string[]
  }

  export type quizCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<quizCreateWithoutQuestionsInput, quizUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: quizCreateOrConnectWithoutQuestionsInput
    connect?: quizWhereUniqueInput
  }

  export type questionUpdateoptionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type quizUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<quizCreateWithoutQuestionsInput, quizUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: quizCreateOrConnectWithoutQuestionsInput
    upsert?: quizUpsertWithoutQuestionsInput
    connect?: quizWhereUniqueInput
    update?: XOR<XOR<quizUpdateToOneWithWhereWithoutQuestionsInput, quizUpdateWithoutQuestionsInput>, quizUncheckedUpdateWithoutQuestionsInput>
  }

  export type userCreateNestedOneWithoutQuizHistoriesInput = {
    create?: XOR<userCreateWithoutQuizHistoriesInput, userUncheckedCreateWithoutQuizHistoriesInput>
    connectOrCreate?: userCreateOrConnectWithoutQuizHistoriesInput
    connect?: userWhereUniqueInput
  }

  export type quizCreateNestedOneWithoutHistoriesInput = {
    create?: XOR<quizCreateWithoutHistoriesInput, quizUncheckedCreateWithoutHistoriesInput>
    connectOrCreate?: quizCreateOrConnectWithoutHistoriesInput
    connect?: quizWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutQuizHistoriesNestedInput = {
    create?: XOR<userCreateWithoutQuizHistoriesInput, userUncheckedCreateWithoutQuizHistoriesInput>
    connectOrCreate?: userCreateOrConnectWithoutQuizHistoriesInput
    upsert?: userUpsertWithoutQuizHistoriesInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutQuizHistoriesInput, userUpdateWithoutQuizHistoriesInput>, userUncheckedUpdateWithoutQuizHistoriesInput>
  }

  export type quizUpdateOneRequiredWithoutHistoriesNestedInput = {
    create?: XOR<quizCreateWithoutHistoriesInput, quizUncheckedCreateWithoutHistoriesInput>
    connectOrCreate?: quizCreateOrConnectWithoutHistoriesInput
    upsert?: quizUpsertWithoutHistoriesInput
    connect?: quizWhereUniqueInput
    update?: XOR<XOR<quizUpdateToOneWithWhereWithoutHistoriesInput, quizUpdateWithoutHistoriesInput>, quizUncheckedUpdateWithoutHistoriesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type quizCreateWithoutCreatedByInput = {
    topic: string
    createdAt?: Date | string
    questions?: questionCreateNestedManyWithoutQuizInput
    histories?: quizHistoryCreateNestedManyWithoutQuizInput
  }

  export type quizUncheckedCreateWithoutCreatedByInput = {
    id?: number
    topic: string
    createdAt?: Date | string
    questions?: questionUncheckedCreateNestedManyWithoutQuizInput
    histories?: quizHistoryUncheckedCreateNestedManyWithoutQuizInput
  }

  export type quizCreateOrConnectWithoutCreatedByInput = {
    where: quizWhereUniqueInput
    create: XOR<quizCreateWithoutCreatedByInput, quizUncheckedCreateWithoutCreatedByInput>
  }

  export type quizCreateManyCreatedByInputEnvelope = {
    data: quizCreateManyCreatedByInput | quizCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type quizHistoryCreateWithoutUserInput = {
    score: number
    attemptedAt?: Date | string
    quiz: quizCreateNestedOneWithoutHistoriesInput
  }

  export type quizHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    quizId: number
    score: number
    attemptedAt?: Date | string
  }

  export type quizHistoryCreateOrConnectWithoutUserInput = {
    where: quizHistoryWhereUniqueInput
    create: XOR<quizHistoryCreateWithoutUserInput, quizHistoryUncheckedCreateWithoutUserInput>
  }

  export type quizHistoryCreateManyUserInputEnvelope = {
    data: quizHistoryCreateManyUserInput | quizHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type quizUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: quizWhereUniqueInput
    update: XOR<quizUpdateWithoutCreatedByInput, quizUncheckedUpdateWithoutCreatedByInput>
    create: XOR<quizCreateWithoutCreatedByInput, quizUncheckedCreateWithoutCreatedByInput>
  }

  export type quizUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: quizWhereUniqueInput
    data: XOR<quizUpdateWithoutCreatedByInput, quizUncheckedUpdateWithoutCreatedByInput>
  }

  export type quizUpdateManyWithWhereWithoutCreatedByInput = {
    where: quizScalarWhereInput
    data: XOR<quizUpdateManyMutationInput, quizUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type quizScalarWhereInput = {
    AND?: quizScalarWhereInput | quizScalarWhereInput[]
    OR?: quizScalarWhereInput[]
    NOT?: quizScalarWhereInput | quizScalarWhereInput[]
    id?: IntFilter<"quiz"> | number
    createdById?: StringFilter<"quiz"> | string
    topic?: StringFilter<"quiz"> | string
    createdAt?: DateTimeFilter<"quiz"> | Date | string
  }

  export type quizHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: quizHistoryWhereUniqueInput
    update: XOR<quizHistoryUpdateWithoutUserInput, quizHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<quizHistoryCreateWithoutUserInput, quizHistoryUncheckedCreateWithoutUserInput>
  }

  export type quizHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: quizHistoryWhereUniqueInput
    data: XOR<quizHistoryUpdateWithoutUserInput, quizHistoryUncheckedUpdateWithoutUserInput>
  }

  export type quizHistoryUpdateManyWithWhereWithoutUserInput = {
    where: quizHistoryScalarWhereInput
    data: XOR<quizHistoryUpdateManyMutationInput, quizHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type quizHistoryScalarWhereInput = {
    AND?: quizHistoryScalarWhereInput | quizHistoryScalarWhereInput[]
    OR?: quizHistoryScalarWhereInput[]
    NOT?: quizHistoryScalarWhereInput | quizHistoryScalarWhereInput[]
    id?: IntFilter<"quizHistory"> | number
    userId?: StringFilter<"quizHistory"> | string
    quizId?: IntFilter<"quizHistory"> | number
    score?: IntFilter<"quizHistory"> | number
    attemptedAt?: DateTimeFilter<"quizHistory"> | Date | string
  }

  export type userCreateWithoutQuizzesInput = {
    id?: string
    email: string
    password?: string | null
    oauth_id?: string | null
    quizHistories?: quizHistoryCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutQuizzesInput = {
    id?: string
    email: string
    password?: string | null
    oauth_id?: string | null
    quizHistories?: quizHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutQuizzesInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutQuizzesInput, userUncheckedCreateWithoutQuizzesInput>
  }

  export type questionCreateWithoutQuizInput = {
    text: string
    options?: questionCreateoptionsInput | string[]
    correctAnswer: string
  }

  export type questionUncheckedCreateWithoutQuizInput = {
    id?: number
    text: string
    options?: questionCreateoptionsInput | string[]
    correctAnswer: string
  }

  export type questionCreateOrConnectWithoutQuizInput = {
    where: questionWhereUniqueInput
    create: XOR<questionCreateWithoutQuizInput, questionUncheckedCreateWithoutQuizInput>
  }

  export type questionCreateManyQuizInputEnvelope = {
    data: questionCreateManyQuizInput | questionCreateManyQuizInput[]
    skipDuplicates?: boolean
  }

  export type quizHistoryCreateWithoutQuizInput = {
    score: number
    attemptedAt?: Date | string
    user: userCreateNestedOneWithoutQuizHistoriesInput
  }

  export type quizHistoryUncheckedCreateWithoutQuizInput = {
    id?: number
    userId: string
    score: number
    attemptedAt?: Date | string
  }

  export type quizHistoryCreateOrConnectWithoutQuizInput = {
    where: quizHistoryWhereUniqueInput
    create: XOR<quizHistoryCreateWithoutQuizInput, quizHistoryUncheckedCreateWithoutQuizInput>
  }

  export type quizHistoryCreateManyQuizInputEnvelope = {
    data: quizHistoryCreateManyQuizInput | quizHistoryCreateManyQuizInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutQuizzesInput = {
    update: XOR<userUpdateWithoutQuizzesInput, userUncheckedUpdateWithoutQuizzesInput>
    create: XOR<userCreateWithoutQuizzesInput, userUncheckedCreateWithoutQuizzesInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutQuizzesInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutQuizzesInput, userUncheckedUpdateWithoutQuizzesInput>
  }

  export type userUpdateWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_id?: NullableStringFieldUpdateOperationsInput | string | null
    quizHistories?: quizHistoryUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_id?: NullableStringFieldUpdateOperationsInput | string | null
    quizHistories?: quizHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type questionUpsertWithWhereUniqueWithoutQuizInput = {
    where: questionWhereUniqueInput
    update: XOR<questionUpdateWithoutQuizInput, questionUncheckedUpdateWithoutQuizInput>
    create: XOR<questionCreateWithoutQuizInput, questionUncheckedCreateWithoutQuizInput>
  }

  export type questionUpdateWithWhereUniqueWithoutQuizInput = {
    where: questionWhereUniqueInput
    data: XOR<questionUpdateWithoutQuizInput, questionUncheckedUpdateWithoutQuizInput>
  }

  export type questionUpdateManyWithWhereWithoutQuizInput = {
    where: questionScalarWhereInput
    data: XOR<questionUpdateManyMutationInput, questionUncheckedUpdateManyWithoutQuizInput>
  }

  export type questionScalarWhereInput = {
    AND?: questionScalarWhereInput | questionScalarWhereInput[]
    OR?: questionScalarWhereInput[]
    NOT?: questionScalarWhereInput | questionScalarWhereInput[]
    id?: IntFilter<"question"> | number
    quizId?: IntFilter<"question"> | number
    text?: StringFilter<"question"> | string
    options?: StringNullableListFilter<"question">
    correctAnswer?: StringFilter<"question"> | string
  }

  export type quizHistoryUpsertWithWhereUniqueWithoutQuizInput = {
    where: quizHistoryWhereUniqueInput
    update: XOR<quizHistoryUpdateWithoutQuizInput, quizHistoryUncheckedUpdateWithoutQuizInput>
    create: XOR<quizHistoryCreateWithoutQuizInput, quizHistoryUncheckedCreateWithoutQuizInput>
  }

  export type quizHistoryUpdateWithWhereUniqueWithoutQuizInput = {
    where: quizHistoryWhereUniqueInput
    data: XOR<quizHistoryUpdateWithoutQuizInput, quizHistoryUncheckedUpdateWithoutQuizInput>
  }

  export type quizHistoryUpdateManyWithWhereWithoutQuizInput = {
    where: quizHistoryScalarWhereInput
    data: XOR<quizHistoryUpdateManyMutationInput, quizHistoryUncheckedUpdateManyWithoutQuizInput>
  }

  export type quizCreateWithoutQuestionsInput = {
    topic: string
    createdAt?: Date | string
    createdBy: userCreateNestedOneWithoutQuizzesInput
    histories?: quizHistoryCreateNestedManyWithoutQuizInput
  }

  export type quizUncheckedCreateWithoutQuestionsInput = {
    id?: number
    createdById: string
    topic: string
    createdAt?: Date | string
    histories?: quizHistoryUncheckedCreateNestedManyWithoutQuizInput
  }

  export type quizCreateOrConnectWithoutQuestionsInput = {
    where: quizWhereUniqueInput
    create: XOR<quizCreateWithoutQuestionsInput, quizUncheckedCreateWithoutQuestionsInput>
  }

  export type quizUpsertWithoutQuestionsInput = {
    update: XOR<quizUpdateWithoutQuestionsInput, quizUncheckedUpdateWithoutQuestionsInput>
    create: XOR<quizCreateWithoutQuestionsInput, quizUncheckedCreateWithoutQuestionsInput>
    where?: quizWhereInput
  }

  export type quizUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: quizWhereInput
    data: XOR<quizUpdateWithoutQuestionsInput, quizUncheckedUpdateWithoutQuestionsInput>
  }

  export type quizUpdateWithoutQuestionsInput = {
    topic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: userUpdateOneRequiredWithoutQuizzesNestedInput
    histories?: quizHistoryUpdateManyWithoutQuizNestedInput
  }

  export type quizUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdById?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    histories?: quizHistoryUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type userCreateWithoutQuizHistoriesInput = {
    id?: string
    email: string
    password?: string | null
    oauth_id?: string | null
    quizzes?: quizCreateNestedManyWithoutCreatedByInput
  }

  export type userUncheckedCreateWithoutQuizHistoriesInput = {
    id?: string
    email: string
    password?: string | null
    oauth_id?: string | null
    quizzes?: quizUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type userCreateOrConnectWithoutQuizHistoriesInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutQuizHistoriesInput, userUncheckedCreateWithoutQuizHistoriesInput>
  }

  export type quizCreateWithoutHistoriesInput = {
    topic: string
    createdAt?: Date | string
    createdBy: userCreateNestedOneWithoutQuizzesInput
    questions?: questionCreateNestedManyWithoutQuizInput
  }

  export type quizUncheckedCreateWithoutHistoriesInput = {
    id?: number
    createdById: string
    topic: string
    createdAt?: Date | string
    questions?: questionUncheckedCreateNestedManyWithoutQuizInput
  }

  export type quizCreateOrConnectWithoutHistoriesInput = {
    where: quizWhereUniqueInput
    create: XOR<quizCreateWithoutHistoriesInput, quizUncheckedCreateWithoutHistoriesInput>
  }

  export type userUpsertWithoutQuizHistoriesInput = {
    update: XOR<userUpdateWithoutQuizHistoriesInput, userUncheckedUpdateWithoutQuizHistoriesInput>
    create: XOR<userCreateWithoutQuizHistoriesInput, userUncheckedCreateWithoutQuizHistoriesInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutQuizHistoriesInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutQuizHistoriesInput, userUncheckedUpdateWithoutQuizHistoriesInput>
  }

  export type userUpdateWithoutQuizHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_id?: NullableStringFieldUpdateOperationsInput | string | null
    quizzes?: quizUpdateManyWithoutCreatedByNestedInput
  }

  export type userUncheckedUpdateWithoutQuizHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_id?: NullableStringFieldUpdateOperationsInput | string | null
    quizzes?: quizUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type quizUpsertWithoutHistoriesInput = {
    update: XOR<quizUpdateWithoutHistoriesInput, quizUncheckedUpdateWithoutHistoriesInput>
    create: XOR<quizCreateWithoutHistoriesInput, quizUncheckedCreateWithoutHistoriesInput>
    where?: quizWhereInput
  }

  export type quizUpdateToOneWithWhereWithoutHistoriesInput = {
    where?: quizWhereInput
    data: XOR<quizUpdateWithoutHistoriesInput, quizUncheckedUpdateWithoutHistoriesInput>
  }

  export type quizUpdateWithoutHistoriesInput = {
    topic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: userUpdateOneRequiredWithoutQuizzesNestedInput
    questions?: questionUpdateManyWithoutQuizNestedInput
  }

  export type quizUncheckedUpdateWithoutHistoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdById?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: questionUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type quizCreateManyCreatedByInput = {
    id?: number
    topic: string
    createdAt?: Date | string
  }

  export type quizHistoryCreateManyUserInput = {
    id?: number
    quizId: number
    score: number
    attemptedAt?: Date | string
  }

  export type quizUpdateWithoutCreatedByInput = {
    topic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: questionUpdateManyWithoutQuizNestedInput
    histories?: quizHistoryUpdateManyWithoutQuizNestedInput
  }

  export type quizUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: questionUncheckedUpdateManyWithoutQuizNestedInput
    histories?: quizHistoryUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type quizUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type quizHistoryUpdateWithoutUserInput = {
    score?: IntFieldUpdateOperationsInput | number
    attemptedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quiz?: quizUpdateOneRequiredWithoutHistoriesNestedInput
  }

  export type quizHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    attemptedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type quizHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    attemptedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type questionCreateManyQuizInput = {
    id?: number
    text: string
    options?: questionCreateoptionsInput | string[]
    correctAnswer: string
  }

  export type quizHistoryCreateManyQuizInput = {
    id?: number
    userId: string
    score: number
    attemptedAt?: Date | string
  }

  export type questionUpdateWithoutQuizInput = {
    text?: StringFieldUpdateOperationsInput | string
    options?: questionUpdateoptionsInput | string[]
    correctAnswer?: StringFieldUpdateOperationsInput | string
  }

  export type questionUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    options?: questionUpdateoptionsInput | string[]
    correctAnswer?: StringFieldUpdateOperationsInput | string
  }

  export type questionUncheckedUpdateManyWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    options?: questionUpdateoptionsInput | string[]
    correctAnswer?: StringFieldUpdateOperationsInput | string
  }

  export type quizHistoryUpdateWithoutQuizInput = {
    score?: IntFieldUpdateOperationsInput | number
    attemptedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutQuizHistoriesNestedInput
  }

  export type quizHistoryUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    attemptedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type quizHistoryUncheckedUpdateManyWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    attemptedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuizCountOutputTypeDefaultArgs instead
     */
    export type QuizCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuizCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use quizDefaultArgs instead
     */
    export type quizArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = quizDefaultArgs<ExtArgs>
    /**
     * @deprecated Use questionDefaultArgs instead
     */
    export type questionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = questionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use quizHistoryDefaultArgs instead
     */
    export type quizHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = quizHistoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}